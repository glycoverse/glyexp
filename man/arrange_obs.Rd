% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dplyr-arrange.R
\name{arrange_obs}
\alias{arrange_obs}
\alias{arrange_var}
\title{Arrange Sample or Variable Information}
\usage{
arrange_obs(exp, ...)

arrange_var(exp, ...)
}
\arguments{
\item{exp}{An \code{\link[=experiment]{experiment()}}.}

\item{...}{<\code{\link[rlang:args_data_masking]{data-masking}}> Variables to arrange by,
passed to \code{dplyr::arrange()} internally.}
}
\value{
An new \code{\link[=experiment]{experiment()}} object.
}
\description{
Arrange the sample or variable information tibble of an \code{\link[=experiment]{experiment()}}.

The same syntax as \code{dplyr::arrange()} is used.
For example, to arrange samples by the "group" column,
use \code{arrange_obs(exp, group)}.
This actually calls \code{dplyr::arrange()} on the sample information tibble
with the \code{group} column,
and then updates the expression matrix accordingly to match the new order.
}
\examples{
# Create a toy experiment for demonstration
expr_mat <- matrix(1:25, nrow = 5)
colnames(expr_mat) <- paste0("S", 1:5)
rownames(expr_mat) <- paste0("V", 1:5)
sample_info <- tibble::tibble(
  sample = paste0("S", 1:5),
  group = c("B", "A", "C", "A", "B")
)
var_info <- tibble::tibble(
  variable = paste0("V", 1:5),
  type = c("Y", "X", "Z", "X", "Y")
)
exp <- experiment(expr_mat, sample_info, var_info)

# Arrange samples by group column
arranged_exp <- arrange_obs(exp, group)
arranged_exp$sample_info
arranged_exp$expr_mat

# Arrange variables by type column  
arranged_exp <- arrange_var(exp, type)
arranged_exp$var_info
arranged_exp$expr_mat

# Arrange by multiple columns
arrange_obs(exp, group, sample)$sample_info

}
