% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/experiment.R
\name{experiment}
\alias{experiment}
\alias{is_experiment}
\title{Create a new experiment}
\usage{
experiment(
  expr_mat,
  sample_info = NULL,
  var_info = NULL,
  exp_type = "others",
  glycan_type = NULL,
  coerce_col_types = TRUE,
  check_col_types = TRUE,
  ...
)

is_experiment(x)
}
\arguments{
\item{expr_mat}{An expression matrix with samples as columns and variables as rows.}

\item{sample_info}{A tibble with a column named "sample", and other
columns other useful information about samples,
e.g. group, batch, sex, age, etc.
If NULL (default), a tibble with only one column named "sample" will be created,
same as the column names of \code{expr_mat}.}

\item{var_info}{A tibble with a column named "variable", and other
columns other useful information about variables,
e.g. protein name, peptide, glycan composition, etc.
If NULL (default), a tibble with only one column named "variable" will be created,
same as the row names of \code{expr_mat}.
Must be provided if \code{exp_type} is not "others".}

\item{exp_type}{The type of the experiment,
"glycomics", "glycoproteomics", "traitomics", "traitproteomics", or "others".
Default to "others".}

\item{glycan_type}{The type of glycan, "N" or "O". Can be NULL if \code{exp_type} is "others".}

\item{coerce_col_types}{If common column types are coerced. Default to TRUE.
If TRUE, all columns in the "Column conventions" section will be coerced to the expected types.
Skipped for "others" type even if TRUE.}

\item{check_col_types}{If column type conventions are checked. Default to TRUE.
Type checking is performed after column coercion (if \code{coerce_col_types} is TRUE).
Skipped for "others" type even if TRUE.}

\item{...}{Other meta data about the experiment.}

\item{x}{An object to check.}
}
\value{
A \code{\link[=experiment]{experiment()}}. If the input data is wrong, an error will be raised.

A logical value.
}
\description{
The data container of a glycoproteomics or glycomics experiment.
Expression matrix, sample information, and variable information
are required then will be managed by the experiment object.
It acts as the data core of the \code{glycoverse} ecosystem.
}
\section{Requirements of the input data}{
\strong{Expression matrix:}
\itemize{
\item Must be a numeric matrix with \strong{variables as rows} and \strong{samples as columns}.
\item The \strong{column names} must correspond to sample IDs.
\item The \strong{row names} must correspond to variable IDs.
}

\strong{Sample information (\code{sample_info}):}
\itemize{
\item Must be a tibble with a column named "sample" (sample ID).
\item Each value in "sample" must be unique.
\item The set of "sample" values must match the column names of the expression matrix (order does not matter).
}

\strong{Variable information (\code{var_info}):}
\itemize{
\item Must be a tibble with a column named "variable" (variable ID).
\item Each value in "variable" must be unique.
\item The set of "variable" values must match the row names of the expression matrix (order does not matter).
}

The function will automatically reorder the expression matrix
to match the order of "sample" and "variable" in the info tables.
}

\section{Column requirements}{
Some columns are required compulsorily in the variable information tibble for a valid experiment.
It depends on the experiment type.
\itemize{
\item For "glycomics": \code{glycan_composition}.
\item For "glycoproteomics": \code{protein}, \code{protein_site}, \code{glycan_composition}.
\item For "traitomics": no required columns.
\item For "traitproteomics": \code{protein}, \code{protein_site}.
\item For "others": no required columns.
}

See the "Column conventions" section for detailed description of these columns.

The last two types of experiments are created by the \code{glydet} package.
Normally you don't need to manually create them.
}

\section{Column conventions}{
\code{glycoverse} has some conserved column names for \code{sample_info} and \code{var_info} to make everything work seamlessly.
It's not mandatory, but following these conventions will make your life easier.

\strong{sample_info:}
\itemize{
\item \code{group}: factor, treatment/condition/grouping, used by many \code{glystats} and \code{glyvis} functions.
\item \code{batch}: factor, batch information, used by \code{glyclean::correct_batch_effect()}.
\item \code{bio_rep}: factor, biological replicate, may be used in the future.
}

\strong{var_info:}
\itemize{
\item \code{protein}: character, protein Uniprot accession.
\item \code{protein_site}: integer, glycosylation site position on protein.
\item \code{gene}: character, gene symbol.
\item \code{peptide}: character, peptide sequence.
\item \code{peptide_site}: integer, glycosylation site position on peptide.
\item \code{glycan_composition}: \code{glyrepr::glycan_composition()}, glycan composition.
\item \code{glycan_structure}: \code{glyrepr::glycan_structure()}, glycan structure.
}
}

\section{Meta data}{
Other meta data can be added to the \code{meta_data} attribute.
\code{meta_data} is a list of additional information about the experiment.
Two meta data fields are required:
\itemize{
\item \code{exp_type}: "glycomics", "glycoproteomics", "traitomics", "traitproteomics", or "others"
\item \code{glycan_type}: "N" or "O" (can be NULL if \code{exp_type} is "others")
}

Other meta data will be added by other \code{glycoverse} packages for their own purposes.
}

\section{Index columns}{
The \strong{index columns} are the backbone that keep your data synchronized:
\itemize{
\item The "sample" column in \code{sample_info} must match the column names of \code{expr_mat}.
\item The "variable" column in \code{var_info} must match the row names of \code{expr_mat}.
}

These columns act as unique identifiers,
ensuring that your expression matrix, sample information, and variable information always stay in sync,
no matter how you filter, arrange, or subset your data.
}

\examples{
# The minimum required input is an expression matrix.
expr_mat <- matrix(runif(9), nrow = 3, ncol = 3)
colnames(expr_mat) <- c("S1", "S2", "S3")
rownames(expr_mat) <- c("V1", "V2", "V3")
experiment(expr_mat)

# Or with more detailed information.
sample_info <- tibble::tibble(sample = c("S1", "S2", "S3"), group = c("A", "B", "A"))
var_info <- tibble::tibble(
  variable = c("V1", "V2", "V3"),
  glycan_composition = glyrepr::glycan_composition(c(Hex = 1))
)
experiment(expr_mat, sample_info, var_info, exp_type = "glycomics", glycan_type = "N")

}
