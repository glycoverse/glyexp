% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dplyr-filter.R
\name{filter_obs}
\alias{filter_obs}
\alias{filter_var}
\title{Filter Samples or Variables of an Experiment}
\usage{
filter_obs(exp, ...)

filter_var(exp, ...)
}
\arguments{
\item{exp}{An \code{\link[=experiment]{experiment()}}.}

\item{...}{<\code{\link[rlang:args_data_masking]{data-masking}}> Expression to filter samples or variables.
passed to \code{\link[dplyr:filter]{dplyr::filter()}} internally.}
}
\value{
An new \code{\link[=experiment]{experiment()}} object.
}
\description{
Getting a subset of an \code{\link[=experiment]{experiment()}} by filtering samples or variables.

The same syntax as \code{\link[dplyr:filter]{dplyr::filter()}} is used.
For example, to get a subset of an experiment keeping only "HC" samples,
use \code{filter_obs(exp, group == "HC")}.
This actually calls \code{dplyr::filter()} on the sample information tibble
with condition \code{group == "HC"},
and then updates the expression matrix accordingly.

If no samples or variables are left after filtering, an error is thrown.
}
\examples{
library(magrittr)

# Create a toy experiment for demonstration
exp <- toy_experiment()
# Add a type column to the variable information for demonstration
exp$var_info$type <- c("X", "X", "Y", "Y")

# Filter samples
sub_exp_1 <- filter_obs(exp, group == "A")
get_sample_info(sub_exp_1)
get_expr_mat(sub_exp_1)

# Filter variables
sub_exp_2 <- filter_var(exp, type == "X")
get_var_info(sub_exp_2)
get_expr_mat(sub_exp_2)

# Use pipe
sub_exp_3 <- exp \%>\%
  filter_obs(group == "A") \%>\%
  filter_var(type == "X")
get_sample_info(sub_exp_3)
get_var_info(sub_exp_3)
get_expr_mat(sub_exp_3)

}
