% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dplyr-join.R
\name{join-experiment}
\alias{join-experiment}
\alias{left_join_obs}
\alias{inner_join_obs}
\alias{semi_join_obs}
\alias{anti_join_obs}
\alias{left_join_var}
\alias{inner_join_var}
\alias{semi_join_var}
\alias{anti_join_var}
\title{Join Data to Sample or Variable Information}
\usage{
left_join_obs(exp, y, by = NULL, ...)

inner_join_obs(exp, y, by = NULL, ...)

semi_join_obs(exp, y, by = NULL, ...)

anti_join_obs(exp, y, by = NULL, ...)

left_join_var(exp, y, by = NULL, ...)

inner_join_var(exp, y, by = NULL, ...)

semi_join_var(exp, y, by = NULL, ...)

anti_join_var(exp, y, by = NULL, ...)
}
\arguments{
\item{exp}{An \code{\link[=experiment]{experiment()}}.}

\item{y}{A data frame to join to \code{sample_info} or \code{var_info}.}

\item{by}{A join specification created with \code{\link[dplyr:join_by]{dplyr::join_by()}}, or a
character vector of variables to join by. See \code{\link[dplyr:mutate-joins]{dplyr::left_join()}} for details.}

\item{...}{Other arguments passed to the underlying dplyr join function,
except \code{relationship} which is locked to "many-to-one".}
}
\value{
A new \code{\link[=experiment]{experiment()}} object with updated sample or variable information.
}
\description{
These functions allow you to join additional data to the sample information
or variable information of an \code{\link[=experiment]{experiment()}}. They work similarly to
\code{\link[dplyr:mutate-joins]{dplyr::left_join()}}, \code{\link[dplyr:mutate-joins]{dplyr::inner_join()}}, \code{\link[dplyr:filter-joins]{dplyr::semi_join()}}, and
\code{\link[dplyr:filter-joins]{dplyr::anti_join()}}, but are designed to work with experiment objects.

After joining, the \code{expr_mat} is automatically updated to reflect any
changes in the number of samples or variables.

\strong{Important Notes:}
\itemize{
\item The \code{relationship} parameter is locked to "many-to-one" to ensure that
the number of observations never increases, which would violate the
experiment object assumptions.
\item \code{right_join()} and \code{full_join()} are not supported as they could add
new observations to the experiment.
}
}
\examples{
library(dplyr)
library(tibble)

# Create a toy experiment
exp <- toy_experiment()

# Create additional sample information to join
extra_sample_info <- tibble(
  sample = c("S1", "S2", "S3", "S4"),
  age = c(25, 30, 35, 40),
  treatment = c("A", "B", "A", "B")
)

# Left join to sample information
exp_with_extra <- left_join_obs(exp, extra_sample_info, by = "sample")
get_sample_info(exp_with_extra)

# Inner join (only keeps matching samples)
exp_inner <- inner_join_obs(exp, extra_sample_info, by = "sample")
get_sample_info(exp_inner)
get_expr_mat(exp_inner)  # Note: expr_mat is updated too

# Create additional variable information to join
extra_var_info <- tibble(
  protein = c("P1", "P2", "P3"),
  pathway = c("A", "B", "A"),
  importance = c(0.8, 0.6, 0.9)
)

# Left join to variable information
exp_with_var_extra <- left_join_var(exp, extra_var_info, by = "protein")
get_var_info(exp_with_var_extra)

}
