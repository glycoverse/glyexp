% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge.R
\name{merge.glyexp_experiment}
\alias{merge.glyexp_experiment}
\title{Merge two experiments}
\usage{
\method{merge}{glyexp_experiment}(x, y, ...)
}
\arguments{
\item{x, y}{\code{\link[=experiment]{experiment()}} objects to merge}

\item{...}{Not used}
}
\value{
A new \code{\link[=experiment]{experiment()}} object
}
\description{
Merges two \code{\link[=experiment]{experiment()}} objects into a single object.

\strong{Expression matrix:}
Expression matrices are merged by matching variables.
For variables that are present in only one of the experiments,
the corresponding values in the expression matrix are set to \code{NA}.

\strong{Sample information:}
Column names and column types must be identical (order does not matter).
No overlap is allowed for sample names.

\strong{Variable information:}
Column names and column types must be identical (order does not matter).
Variable names are ignored.
The identity of variables is determined by all other columns in the variable information.
If row A in the first \code{var_info} is identical (order does not matter)
to row B in the second \code{var_info},
they are considered the same variable.
Therefore, please make sure that each row has a unique combination of values (except for \code{variable}),
otherwise the function cannot determine which variable in \code{x} is identical to which variable in \code{y}.
To ensure uniqueness, you can use \code{glyclean::aggregate()}.

\strong{Metadata:}
Metadata is taken from the first experiment.
This is the only place where the order of \code{x} and \code{y} matters.
}
\section{Variable matching}{
In the variable information tibble,
the \code{variable} column is just arbitrary unique identifier,
while the real identity of a variable is determined by all other columns.
For example, if the variable information tibble has the following columns:

\if{html}{\out{<div class="sourceCode">}}\preformatted{variable glycan_composition protein protein_site
V1       Hex(2)HexNAc(1)    P1      2
V2       Hex(2)HexNAc(1)    P2      3
V3       Hex(2)HexNAc(2)    P2      3
V4       Hex(2)HexNAc(2)    P2      3
}\if{html}{\out{</div>}}

We know that V1, V2, and V3 are all different variables,
but V3 and V4 are the same variable (they have the same glycan composition, protein, and protein site).

During the merge, the function will use all columns in the variable information tibble
except for \code{variable} to match variables.
This means that if the combination of all other columns is not unique,
the function cannot determine the identity of the variables.

To ensure uniqueness, you can use \code{glyclean::aggregate()},
which merges the expression levels of variables with the same identity.

After the merge, a new \code{variable} column is added to the variable information tibble,
and used as the rownames of the expression matrix.
}

\section{Variable and sample orders}{
The order of variables and samples in the merged experiment is deterministic.

For samples, as no overlapping is allowed for sample names,
the new sample names are the union of the sample names in \code{x} and \code{y},
orders reserved.

For variables, the new variables are:
\enumerate{
\item First, all variables in \code{x}, with the same order as in \code{x}.
\item Then, all variables in \code{y} while not in \code{x}, with the same order as in \code{y}.
}

Note that for variables, we refer to the identity of variables,
not the variable names in the \code{variable} column.
}

