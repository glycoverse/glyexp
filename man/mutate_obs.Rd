% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dplyr-mutate.R
\name{mutate_obs}
\alias{mutate_obs}
\alias{mutate_var}
\title{Mutate sample or variable information}
\usage{
mutate_obs(exp, ...)

mutate_var(exp, ...)
}
\arguments{
\item{exp}{An \code{\link[=experiment]{experiment()}}.}

\item{...}{<\code{\link[rlang:args_data_masking]{data-masking}}> Name-value pairs,
passed to \code{dplyr::mutate()} internally.}
}
\value{
An new \code{\link[=experiment]{experiment()}} object.
}
\description{
Mutate the sample or variable information tibble of an \code{\link[=experiment]{experiment()}}.

The same syntax as \code{dplyr::mutate()} is used.
For example, to add a new column to the sample information tibble,
use \code{mutate_obs(exp, new_column = value)}.
This actually calls \code{dplyr::mutate()} on the sample information tibble
with \code{new_column = value}.

If the \code{sample} column in \code{sample_info} or the \code{variable} column in \code{var_info}
is to be modified, the new column must be unique,
otherwise an error is thrown.
The column names or row names of \code{expr_mat} will be updated accordingly.
}
\examples{
# Create a toy experiment for demonstration
exp <- toy_experiment
# Add a type column to the variable information for demonstration
exp$var_info$type <- c("X", "X", "Y", "Y")

# Add a new column to sample information tibble or variable information tibble
mutate_obs(exp, new_column = c(1, 2, 3, 4, 5, 6))$sample_info
mutate_var(exp, new_column = c("A", "A", "B", "B"))$var_info

# Modify existing columns
mutate_obs(exp, group = dplyr::if_else(group == "A", "good", "bad"))$sample_info
mutate_var(exp, type = dplyr::if_else(type == "X", "good", "bad"))$var_info

# Modify the `sample` column in sample information tibble
new_exp <- mutate_obs(exp, sample = c("SI", "SII", "SIII", "SIV", "SV", "SVI"))
new_exp$sample_info
new_exp$expr_mat

# Modify the `variable` column in variable information tibble
new_exp <- mutate_var(exp, variable = c("VI", "VII", "VIII", "VIV"))
new_exp$var_info
new_exp$expr_mat

}
