[{"path":[]},{"path":"https://glycoverse.github.io/glyexp/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://glycoverse.github.io/glyexp/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://glycoverse.github.io/glyexp/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://glycoverse.github.io/glyexp/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://glycoverse.github.io/glyexp/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://glycoverse.github.io/glyexp/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://glycoverse.github.io/glyexp/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://glycoverse.github.io/glyexp/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://glycoverse.github.io/glyexp/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://glycoverse.github.io/glyexp/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://glycoverse.github.io/glyexp/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://glycoverse.github.io/glyexp/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to glyexp","title":"Contributing to glyexp","text":"outlines propose change glyexp. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://glycoverse.github.io/glyexp/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to glyexp","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://glycoverse.github.io/glyexp/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to glyexp","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://glycoverse.github.io/glyexp/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to glyexp","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"glycoverse/glyexp\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://glycoverse.github.io/glyexp/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to glyexp","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://glycoverse.github.io/glyexp/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to glyexp","text":"Please note glyexp project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://glycoverse.github.io/glyexp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 glyexp authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://glycoverse.github.io/glyexp/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with glyexp","title":"Getting help with glyexp","text":"Thanks using glyexp! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://glycoverse.github.io/glyexp/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with glyexp","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty incredible ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://glycoverse.github.io/glyexp/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with glyexp","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://glycoverse.github.io/glyexp/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with glyexp","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/create-exp.html","id":"what-youll-need","dir":"Articles","previous_headings":"","what":"What You’ll Need","title":"Creating Experiments","text":"Creating experiment() object like assembling puzzle – need three key pieces make everything fit together perfectly: Expression Matrix: numeric data arranged variables rows samples columns (heart dataset!) Sample Information: tibble containing juicy details samples – groups, batches, demographics, name Variable Information: tibble describing variables – proteins, peptides, glycan compositions, ’ll also sprinkle experiment metadata complete picture. Ready? Let’s dive !","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/create-exp.html","id":"step-1-getting-your-samples-organized","dir":"Articles","previous_headings":"","what":"Step 1: Getting Your Samples Organized","title":"Creating Experiments","text":"Let’s start sample information – think sample’s ID card plus important details one. golden rule simple: first column must named sample, every entry needs unique (duplicates allowed!). sample identifiers – names tie everything together. remaining columns, complete freedom! Add information matters analysis: groups, batches, patient demographics, treatment conditions – whatever helps tell story.","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/create-exp.html","id":"pro-tips-for-column-names","dir":"Articles","previous_headings":"Step 1: Getting Your Samples Organized","what":"Pro Tips for Column Names","title":"Creating Experiments","text":"glycoverse family favorite column names make everything work seamlessly: group: experimental conditions treatments (yes, make factor!). star player – glystats functions rely column. batch: tracking sample batches (another factor, please!). Essential glyclean::remove_batch_effect(). batch column? problem – glyclean::auto_clean() simply skip batch correction. bio_rep: biological replicates (factor!). May used future. Note: ’re constantly expanding list, stay tuned conventions! Another note: “accidentally” perfectly follow column typing conventions, function automatically coerce column types expected types. behavior can controlled coerce_col_types check_col_types arguments. Although can rely automatic column type conversion, still recommend manually convert column types expected types. allows finer control details, example, factor levels. Let’s build sample information table:","code":"sample_info <- tibble(   sample = c(\"S1\", \"S2\", \"S3\", \"S4\", \"S5\", \"S6\"),   group = factor(c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"), levels = c(\"A\", \"B\")),   batch = factor(c(1, 2, 1, 2, 1, 2), levels = c(1, 2)) ) sample_info #> # A tibble: 6 × 3 #>   sample group batch #>   <chr>  <fct> <fct> #> 1 S1     A     1     #> 2 S2     A     2     #> 3 S3     A     1     #> 4 S4     B     2     #> 5 S5     B     1     #> 6 S6     B     2"},{"path":"https://glycoverse.github.io/glyexp/articles/create-exp.html","id":"step-2-describing-your-variables","dir":"Articles","previous_headings":"","what":"Step 2: Describing Your Variables","title":"Creating Experiments","text":"Now variable information – describe measurement actually represents. Good news glycoproteomics folks: ’re using glyread, sit back relax! automatically extracts information software output files. glycomics experiments: ’ll likely need build manually, don’t worry – glycomics data structures much straightforward glycoproteomics cousins.","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/create-exp.html","id":"the-variable-naming-game","dir":"Articles","previous_headings":"Step 2: Describing Your Variables","what":"The Variable Naming Game","title":"Creating Experiments","text":"Just like samples, first column must named variable unique values. ’s thing though – names don’t need fancy meaningful. fact, glyread happily uses simple names like “V1”, “V2”, “V3” default, works perfectly fine!","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/create-exp.html","id":"column-conventions-by-experiment-type","dir":"Articles","previous_headings":"Step 2: Describing Your Variables","what":"Column Conventions by Experiment Type","title":"Creating Experiments","text":"glycomics experiments, columns friends: glycan_composition: Required. glycan composition glyrepr::glycan_composition() object glycan_structure: Optional. glycan structure glyrepr::glycan_structure() object (use character strings glyparse::auto_parse() understands, recommend parsed objects avoid repetitive parsing later) glycoproteomics experiments, ’ll want additional columns: protein: Required. UniProt accession (character) protein_site: Required. Glycosylation site position protein (integer) gene: Optional. Gene name (character) peptide: Optional. Peptide sequence (character) peptide_site: Optional. Peptide site position glycan attachment (integer) Let’s create variable information table:","code":"var_info <- tibble(   variable = c(\"V1\", \"V2\", \"V3\"),   glycan_composition = glyrepr::glycan_composition(     c(GalNAc = 1),     c(Gal = 1, GalNAc = 1),     c(Gal = 1, GalNAc = 1, GlcNAc = 1)   ),   glycan_structure = glyrepr::as_glycan_structure(c(     \"GalNAc(a1-\",     \"Gal(b1-3)GalNAc(a1-\",     \"Gal(b1-3)[GlcNAc(a1-6)]GalNAc(a1-\"   )) ) var_info #> # A tibble: 3 × 3 #>   variable glycan_composition       glycan_structure                  #>   <chr>    <comp>                   <struct>                          #> 1 V1       GalNAc(1)                GalNAc(a1-                        #> 2 V2       Gal(1)GalNAc(1)          Gal(b1-3)GalNAc(a1-               #> 3 V3       Gal(1)GlcNAc(1)GalNAc(1) Gal(b1-3)[GlcNAc(a1-6)]GalNAc(a1-"},{"path":"https://glycoverse.github.io/glyexp/articles/create-exp.html","id":"step-3-building-your-expression-matrix","dir":"Articles","previous_headings":"","what":"Step 3: Building Your Expression Matrix","title":"Creating Experiments","text":"Time main event – expression matrix! actual measurements live. layout straightforward: variables rows, samples columns. don’t need perform transformation data, especially log-transformation. glycoverse functions handle data transformation internally needed.","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/create-exp.html","id":"the-matching-game","dir":"Articles","previous_headings":"Step 3: Building Your Expression Matrix","what":"The Matching Game","title":"Creating Experiments","text":"’s important bit: row names must match variable column variable information, column names must match sample column sample information. Think connecting dots data metadata. Bonus: order doesn’t need perfect – functions smart enough line everything correctly! Let’s create expression matrix:","code":"# Create a simple matrix with 3 variables and 6 samples expr_mat <- matrix(   rnorm(18, mean = 10, sd = 2), # Some realistic-looking data   nrow = 3,    ncol = 6 ) rownames(expr_mat) <- var_info$variable colnames(expr_mat) <- sample_info$sample expr_mat #>           S1        S2       S3        S4        S5       S6 #> V1  7.199913  9.988857 6.356365  9.434589 14.130050 6.273977 #> V2 10.510634 11.243105 9.505349  8.892601  6.738021 8.955975 #> V3  5.125473 12.296823 9.511601 11.257964 11.024854 9.894796"},{"path":"https://glycoverse.github.io/glyexp/articles/create-exp.html","id":"step-4-bringing-it-all-together","dir":"Articles","previous_headings":"","what":"Step 4: Bringing It All Together","title":"Creating Experiments","text":"Congratulations! ’ve got pieces puzzle. Now let’s assemble experiment() object: Don’t forget metadata: ’ll need specify experiment type (\"glycomics\" \"glycoproteomics\") glycan type (like \"N\" N-linked, \"O\" O-linked, etc.). little details help downstream functions understand exactly ’re working . – experiment() object, ready exciting analyses await! 🎉","code":"exp <- experiment(expr_mat, sample_info, var_info, exp_type = \"glycomics\", glycan_type = \"N\") exp #>  #> ── Glycomics Experiment ──────────────────────────────────────────────────────── #> ℹ Expression matrix: 6 samples, 3 variables #> ℹ Sample information fields: group <fct>, batch <fct> #> ℹ Variable information fields: glycan_composition <comp>, glycan_structure <struct>"},{"path":"https://glycoverse.github.io/glyexp/articles/create-exp.html","id":"the-minimum-required-input","dir":"Articles","previous_headings":"","what":"The Minimum Required Input","title":"Creating Experiments","text":"fact, minimum required input expression matrix. information provided, automatically generated based following rules: sample_info: tibble one column named “sample”, column names expr_mat. var_info: tibble one column named “variable”, row names expr_mat. exp_type: “others” glycan_type: NULL means can create experiment() objects flexible way: first create backbone using expression matrix, add information later using mutate_var() mutate_obs(). multiple fields stored different tables, can use left_join_var() left_join_obs() join experiment().","code":"expr_mat <- matrix(runif(9), nrow = 3, ncol = 3) colnames(expr_mat) <- c(\"S1\", \"S2\", \"S3\") rownames(expr_mat) <- c(\"V1\", \"V2\", \"V3\") experiment(expr_mat) #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 3 samples, 3 variables #> ℹ Sample information fields: none #> ℹ Variable information fields: none"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"the-core-philosophy-one-action-three-updates","dir":"Articles","previous_headings":"","what":"The Core Philosophy: One Action, Three Updates 🎭","title":"dplyr-Style Functions: Data Harmony in Action","text":"Imagine ’re conductor three-piece orchestra: 🎼 First violin (Expression Matrix): numerical data 🎼 Second violin (Sample Info): experimental metadata 🎼 Viola (Variable Info): molecular annotations traditional data analysis, want first violin play solo (filter samples), manually cue instrument. Miss beat, symphony turns chaos. glyexp’s dplyr-style functions different. ’re like magical conductor’s baton - wave , three instruments respond perfect harmony! Let’s see magic action:","code":"toy_exp <- toy_experiment print(toy_exp) #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 6 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"the-two-flavors-_obs-and-_var","dir":"Articles","previous_headings":"","what":"The Two Flavors: _obs() and _var() 🍦","title":"dplyr-Style Functions: Data Harmony in Action","text":"Every dplyr-style function glyexp comes two delicious flavors: _obs() functions: Work sample information (observations/columns) experiment() objects _var() functions: Work variable annotations (variables/rows) experiment() objects ’s beautiful part - flavors automatically update expression matrix maintain perfect synchronization! ⚠️ Reminder: specialized functions require experiment() object input return experiment() object output. used standard tibbles data.frames - , use regular dplyr functions directly.","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"filtering-the-art-of-selective-attention","dir":"Articles","previous_headings":"The Two Flavors: _obs() and _var() 🍦","what":"Filtering: The Art of Selective Attention 🔍","title":"dplyr-Style Functions: Data Harmony in Action","text":"Let’s start common operation - filtering data.","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"sample-based-filtering-with-filter_obs","dir":"Articles","previous_headings":"The Two Flavors: _obs() and _var() 🍦 > Filtering: The Art of Selective Attention 🔍","what":"Sample-Based Filtering with filter_obs()","title":"dplyr-Style Functions: Data Harmony in Action","text":"Say want focus group “” samples: Beautiful! ’s magic happens - check expression matrix: 🎪 Ta-da! expression matrix automatically filtered columns match remaining samples! manual intervention, risk mismatched data - just pure, synchronized harmony.","code":"# Before filtering - let's see what we have get_sample_info(toy_exp) #> # A tibble: 6 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S2     A         2 #> 3 S3     A         1 #> 4 S4     B         2 #> 5 S5     B         1 #> 6 S6     B         2 # Filter for group A samples only filtered_exp <- filter_obs(toy_exp, group == \"A\") get_sample_info(filtered_exp) #> # A tibble: 3 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S2     A         2 #> 3 S3     A         1 # Original matrix dimensions: dim(get_expr_mat(toy_exp)) #> [1] 4 6  # Original matrix: get_expr_mat(toy_exp) #>    S1 S2 S3 S4 S5 S6 #> V1  1  5  9 13 17 21 #> V2  2  6 10 14 18 22 #> V3  3  7 11 15 19 23 #> V4  4  8 12 16 20 24 # Filtered expression matrix - automatically updated!  # Filtered matrix dimensions: dim(get_expr_mat(filtered_exp)) #> [1] 4 3  # Filtered matrix: get_expr_mat(filtered_exp) #>    S1 S2 S3 #> V1  1  5  9 #> V2  2  6 10 #> V3  3  7 11 #> V4  4  8 12"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"variable-based-filtering-with-filter_var","dir":"Articles","previous_headings":"The Two Flavors: _obs() and _var() 🍦 > Filtering: The Art of Selective Attention 🔍","what":"Variable-Based Filtering with filter_var()","title":"dplyr-Style Functions: Data Harmony in Action","text":"Now let’s filter variables watch magic happen: matrix rows automatically reduced match filtered variables! core power glyexp - think metadata, expression data follows lead.","code":"# Filter for specific glycan compositions var_filtered_exp <- filter_var(toy_exp, glycan_composition == \"H5N2\") get_var_info(var_filtered_exp) #> # A tibble: 2 × 4 #>   variable protein peptide glycan_composition #>   <chr>    <chr>   <chr>   <chr>              #> 1 V1       PRO1    PEP1    H5N2               #> 2 V2       PRO2    PEP2    H5N2 # The expression matrix rows automatically follow suit! get_expr_mat(var_filtered_exp) #>    S1 S2 S3 S4 S5 S6 #> V1  1  5  9 13 17 21 #> V2  2  6 10 14 18 22"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"chaining-filters-the-symphony-continues","dir":"Articles","previous_headings":"The Two Flavors: _obs() and _var() 🍦 > Filtering: The Art of Selective Attention 🔍","what":"Chaining Filters: The Symphony Continues 🎵","title":"dplyr-Style Functions: Data Harmony in Action","text":"Want filter samples variables? Chain together like beautiful melody: Notice pipe-friendly design? ’s dplyr DNA action - familiar syntax, powerful results!","code":"double_filtered <- toy_exp |>   filter_obs(group == \"A\") |>   filter_var(glycan_composition %in% c(\"H5N2\", \"N3N2\"))  # Final dimensions after double filtering: dim(get_expr_mat(double_filtered)) #> [1] 2 3 get_expr_mat(double_filtered) #>    S1 S2 S3 #> V1  1  5  9 #> V2  2  6 10"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"the-sacred-index-columns-guardians-of-data-integrity","dir":"Articles","previous_headings":"","what":"The Sacred Index Columns: Guardians of Data Integrity 🛡️","title":"dplyr-Style Functions: Data Harmony in Action","text":"’s glyexp really shines: index column protection. special columns (like “sample” “variable”) backbone data relationships. Lose , carefully orchestrated data symphony falls apart. Let’s see protection action:","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"attempting-to-remove-index-columns-spoiler-it-wont-work","dir":"Articles","previous_headings":"The Sacred Index Columns: Guardians of Data Integrity 🛡️","what":"Attempting to Remove Index Columns (Spoiler: It Won’t Work!) 😄","title":"dplyr-Style Functions: Data Harmony in Action","text":"see error message? glyexp throws helpful error message protects data integrity preventing operation entirely! Similarly, glyexp throws error protect “variable” column removed! 🏰","code":"# Try to select everything EXCEPT the sample index column protective_exp <- select_obs(toy_exp, -sample) #> Error: #> ! You should not explicitly select or deselect the \"sample\" column in #>   `sample_info`. #> ℹ The \"sample\" column will be handled by `select_obs()` or `select_var()` #>   automatically. get_sample_info(protective_exp) #> Error: object 'protective_exp' not found # Same protection for variable info protective_var_exp <- select_var(toy_exp, -variable) #> Error: #> ! You should not explicitly select or deselect the \"variable\" column in #>   `var_info`. #> ℹ The \"variable\" column will be handled by `select_obs()` or `select_var()` #>   automatically. get_var_info(protective_var_exp) #> Error: object 'protective_var_exp' not found"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"why-this-protection-matters","dir":"Articles","previous_headings":"The Sacred Index Columns: Guardians of Data Integrity 🛡️","what":"Why This Protection Matters","title":"dplyr-Style Functions: Data Harmony in Action","text":"Without index columns, experiment() object lose ability : ✅ Keep expression matrix metadata synchronized ✅ Validate data consistency ✅ Enable seamless subsetting operations ✅ Work glycoverse packages Think index columns GPS coordinates data - remove , ’re lost sea unconnected numbers!","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"the-complete-function-family-tree","dir":"Articles","previous_headings":"","what":"The Complete Function Family Tree 🌳","title":"dplyr-Style Functions: Data Harmony in Action","text":"glyexp provides dplyr-style equivalents favorite data manipulation functions. function comes _obs() _var() flavors, automatically maintain matrix synchronization. 🔧 Technical Note: functions methods specifically experiment() objects. Unlike generic dplyr functions work various data types, functions expect return experiment() objects exclusively:","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"deep-dive-function-by-function-examples","dir":"Articles","previous_headings":"","what":"Deep Dive: Function-by-Function Examples 🏊‍♂️","title":"dplyr-Style Functions: Data Harmony in Action","text":"Let’s explore function family hands-examples!","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"selection-choosing-your-data-wisely","dir":"Articles","previous_headings":"Deep Dive: Function-by-Function Examples 🏊‍♂️","what":"Selection: Choosing Your Data Wisely 🎯","title":"dplyr-Style Functions: Data Harmony in Action","text":"Pro tip: Use dplyr-style helpers like starts_with(), ends_with(), contains():","code":"# Select specific columns from sample info selected_exp <- select_obs(toy_exp, group, batch) get_sample_info(selected_exp) #> # A tibble: 6 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S2     A         2 #> 3 S3     A         1 #> 4 S4     B         2 #> 5 S5     B         1 #> 6 S6     B         2 # Select columns from variable info (notice the index protection!) var_selected_exp <- select_var(toy_exp, glycan_composition) get_var_info(var_selected_exp) #> # A tibble: 4 × 2 #>   variable glycan_composition #>   <chr>    <chr>              #> 1 V1       H5N2               #> 2 V2       H5N2               #> 3 V3       H3N2               #> 4 V4       H3N2 # Select columns starting with \"glycan\" helper_exp <- select_var(toy_exp, starts_with(\"glycan\")) get_var_info(helper_exp) #> # A tibble: 4 × 2 #>   variable glycan_composition #>   <chr>    <chr>              #> 1 V1       H5N2               #> 2 V2       H5N2               #> 3 V3       H3N2               #> 4 V4       H3N2"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"arrangement-putting-things-in-order","dir":"Articles","previous_headings":"Deep Dive: Function-by-Function Examples 🏊‍♂️","what":"Arrangement: Putting Things in Order 📊","title":"dplyr-Style Functions: Data Harmony in Action","text":"magic moment: Check expression matrix columns rearranged match!","code":"# Arrange samples by batch and group arranged_exp <- arrange_obs(toy_exp, batch, group) get_sample_info(arranged_exp) #> # A tibble: 6 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S3     A         1 #> 3 S5     B         1 #> 4 S2     A         2 #> 5 S4     B         2 #> 6 S6     B         2 # Expression matrix columns follow the new sample order get_expr_mat(arranged_exp) #>    S1 S3 S5 S2 S4 S6 #> V1  1  9 17  5 13 21 #> V2  2 10 18  6 14 22 #> V3  3 11 19  7 15 23 #> V4  4 12 20  8 16 24"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"mutation-creating-new-insights","dir":"Articles","previous_headings":"Deep Dive: Function-by-Function Examples 🏊‍♂️","what":"Mutation: Creating New Insights ➕","title":"dplyr-Style Functions: Data Harmony in Action","text":"","code":"# Add a new calculated column to sample info mutated_exp <- mutate_obs(   toy_exp,   group_batch = paste(group, batch, sep = \"_\") ) get_sample_info(mutated_exp) #> # A tibble: 6 × 4 #>   sample group batch group_batch #>   <chr>  <chr> <dbl> <chr>       #> 1 S1     A         1 A_1         #> 2 S2     A         2 A_2         #> 3 S3     A         1 A_1         #> 4 S4     B         2 B_2         #> 5 S5     B         1 B_1         #> 6 S6     B         2 B_2 # Create a complexity score for variables complex_exp <- mutate_var(   toy_exp,   complexity = nchar(glycan_composition) ) get_var_info(complex_exp) #> # A tibble: 4 × 5 #>   variable protein peptide glycan_composition complexity #>   <chr>    <chr>   <chr>   <chr>                   <int> #> 1 V1       PRO1    PEP1    H5N2                        4 #> 2 V2       PRO2    PEP2    H5N2                        4 #> 3 V3       PRO3    PEP3    H3N2                        4 #> 4 V4       PRO3    PEP4    H3N2                        4"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"slicing-precision-subsetting","dir":"Articles","previous_headings":"Deep Dive: Function-by-Function Examples 🏊‍♂️","what":"Slicing: Precision Subsetting 🔢","title":"dplyr-Style Functions: Data Harmony in Action","text":"","code":"# Take the first 2 samples head_exp <- slice_head_obs(toy_exp, n = 2) get_sample_info(head_exp) #> # A tibble: 2 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S2     A         2 # Expression matrix automatically adjusts get_expr_mat(head_exp) #>    S1 S2 #> V1  1  5 #> V2  2  6 #> V3  3  7 #> V4  4  8 # Sample randomly from variables set.seed(123)  # For reproducibility random_exp <- slice_sample_var(toy_exp, n = 3) get_var_info(random_exp) #> # A tibble: 3 × 4 #>   variable protein peptide glycan_composition #>   <chr>    <chr>   <chr>   <chr>              #> 1 V3       PRO3    PEP3    H3N2               #> 2 V4       PRO3    PEP4    H3N2               #> 3 V1       PRO1    PEP1    H5N2"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"renaming-clarity-through-better-names","dir":"Articles","previous_headings":"Deep Dive: Function-by-Function Examples 🏊‍♂️","what":"Renaming: Clarity Through Better Names 🏷️","title":"dplyr-Style Functions: Data Harmony in Action","text":"Notice: index column “sample” remains untouchable, everything else can renamed freely!","code":"# Rename columns in sample info renamed_exp <- rename_obs(toy_exp, experimental_group = group) get_sample_info(renamed_exp) #> # A tibble: 6 × 3 #>   sample experimental_group batch #>   <chr>  <chr>              <dbl> #> 1 S1     A                      1 #> 2 S2     A                      2 #> 3 S3     A                      1 #> 4 S4     B                      2 #> 5 S5     B                      1 #> 6 S6     B                      2"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"joining-bridging-tables-together","dir":"Articles","previous_headings":"Deep Dive: Function-by-Function Examples 🏊‍♂️","what":"Joining: Bridging Tables Together 🔗","title":"dplyr-Style Functions: Data Harmony in Action","text":"functions can useful additional information stored separate tibble, want add experiment() object. might noticed don’t alternatives dplyr::right_join() dplyr::full_join(). design joining functions glyexp used add new information experiment() object. However, right_join() full_join() add observations resulting tibbles, suitable experiment() objects. reason, relationship parameter fixed “many--one” joining functions glyexp. probably don’t need know , , check documentation dplyr::left_join() details.","code":"# Join sample info with variable info more_sample_info <- tibble::tibble(   sample = c(\"S1\", \"S2\", \"S3\", \"S4\", \"S5\", \"S6\"),   age = c(20, 21, 22, 23, 24, 25),   gender = c(\"M\", \"F\", \"M\", \"F\", \"M\", \"F\") ) joined_exp <- left_join_obs(toy_exp, more_sample_info, by = \"sample\") get_sample_info(joined_exp) #> # A tibble: 6 × 5 #>   sample group batch   age gender #>   <chr>  <chr> <dbl> <dbl> <chr>  #> 1 S1     A         1    20 M      #> 2 S2     A         2    21 F      #> 3 S3     A         1    22 M      #> 4 S4     B         2    23 F      #> 5 S5     B         1    24 M      #> 6 S6     B         2    25 F"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"advanced-patterns-chaining-for-complex-operations","dir":"Articles","previous_headings":"","what":"Advanced Patterns: Chaining for Complex Operations 🔗","title":"dplyr-Style Functions: Data Harmony in Action","text":"real power emerges chain multiple operations together. advanced patterns:","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"pattern-1-filter-select-arrange","dir":"Articles","previous_headings":"Advanced Patterns: Chaining for Complex Operations 🔗","what":"Pattern 1: Filter → Select → Arrange","title":"dplyr-Style Functions: Data Harmony in Action","text":"","code":"complex_pipeline <- toy_exp |>   filter_obs(group == \"A\") |>   select_obs(group, batch) |>   arrange_obs(desc(batch)) |>   filter_var(protein == \"PRO1\") |>   select_var(glycan_composition, protein)  print(\"Final pipeline result:\") #> [1] \"Final pipeline result:\" print(complex_pipeline) #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 3 samples, 1 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: glycan_composition <chr>, protein <chr>"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"pattern-2-mutate-filter-slice","dir":"Articles","previous_headings":"Advanced Patterns: Chaining for Complex Operations 🔗","what":"Pattern 2: Mutate → Filter → Slice","title":"dplyr-Style Functions: Data Harmony in Action","text":"","code":"analytical_pipeline <- toy_exp |>   mutate_var(composition_length = nchar(glycan_composition)) |>   filter_var(composition_length >= 4) |>   slice_max_var(composition_length, n = 3)  get_var_info(analytical_pipeline) #> # A tibble: 4 × 5 #>   variable protein peptide glycan_composition composition_length #>   <chr>    <chr>   <chr>   <chr>                           <int> #> 1 V1       PRO1    PEP1    H5N2                                4 #> 2 V2       PRO2    PEP2    H5N2                                4 #> 3 V3       PRO3    PEP3    H3N2                                4 #> 4 V4       PRO3    PEP4    H3N2                                4"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"pattern-3-random-sampling-for-testing","dir":"Articles","previous_headings":"Advanced Patterns: Chaining for Complex Operations 🔗","what":"Pattern 3: Random Sampling for Testing","title":"dplyr-Style Functions: Data Harmony in Action","text":"","code":"# Create a smaller dataset for testing set.seed(456) test_exp <- toy_exp |>   slice_sample_obs(n = 3) |>   slice_sample_var(n = 4)  print(\"Test dataset dimensions:\") #> [1] \"Test dataset dimensions:\" print(test_exp) #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 3 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"when-dplyr-style-functions-cant-help-the-escape-hatch","dir":"Articles","previous_headings":"","what":"When dplyr-Style Functions Can’t Help: The Escape Hatch 🚪","title":"dplyr-Style Functions: Data Harmony in Action","text":"Sometimes need functionality goes beyond glyexp’s dplyr-style functions provide. problem! Since glyexp’s dplyr-style functions work experiment() objects, need standard dplyr functionality, simply extract tibbles use dplyr function want.","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"why-doesnt-glyexp-implement-all-dplyr-functions","dir":"Articles","previous_headings":"When dplyr-Style Functions Can’t Help: The Escape Hatch 🚪","what":"Why Doesn’t glyexp Implement All dplyr Functions? 🤔","title":"dplyr-Style Functions: Data Harmony in Action","text":"philosophy simple: glyexp implements functions preserve synchronized multi-table structure experiment() objects. Functions like count(), distinct(), summarise(), pull() return aggregated results break original data relationships. operations, extract relevant tibble use standard dplyr functions:","code":"# For complex aggregations toy_exp |>   get_sample_info() |>   count(group) #> # A tibble: 2 × 2 #>   group     n #>   <chr> <int> #> 1 A         3 #> 2 B         3 # For distinct values toy_exp |>   get_var_info() |>   distinct(protein) |>   pull(protein) #> [1] \"PRO1\" \"PRO2\" \"PRO3\" # For advanced filtering with multiple conditions complex_filter_conditions <- toy_exp |>   get_sample_info() |>   filter(group == \"A\", batch == 2) |>   pull(sample)  # Then use the results to subset your experiment filtered_by_complex <- filter_obs(toy_exp, sample %in% complex_filter_conditions)"},{"path":[]},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"pitfall-1-using-glyexp-functions-on-non-experiment-objects","dir":"Articles","previous_headings":"Common Pitfalls and How to Avoid Them ⚠️","what":"Pitfall 1: Using glyexp Functions on Non-Experiment Objects","title":"dplyr-Style Functions: Data Harmony in Action","text":"❌ won’t work: ✅ instead:","code":"# glyexp functions only work on experiment() objects! library(tibble) regular_tibble <- tibble(group = c(\"A\", \"B\"), value = c(1, 2)) filter_obs(regular_tibble, group == \"A\")  # Error: not an experiment object! #> Error in filter_info_data(exp = exp, info_field = \"sample_info\", id_column = \"sample\", : is_experiment(exp) is not TRUE # Use regular dplyr functions for regular data structures regular_tibble <- tibble(group = c(\"A\", \"B\"), value = c(1, 2)) filter(regular_tibble, group == \"A\")  # Works perfectly! #> # A tibble: 1 × 2 #>   group value #>   <chr> <dbl> #> 1 A         1  # Use glyexp functions only with experiment objects filtered_exp <- filter_obs(toy_exp, group == \"A\")  # This works! get_sample_info(filtered_exp) #> # A tibble: 3 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S2     A         2 #> 3 S3     A         1"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"pitfall-2-forgetting-the-synchronization-magic","dir":"Articles","previous_headings":"Common Pitfalls and How to Avoid Them ⚠️","what":"Pitfall 2: Forgetting the Synchronization Magic","title":"dplyr-Style Functions: Data Harmony in Action","text":"❌ Don’t : ✅ instead:","code":"# This breaks synchronization! sample_info <- get_sample_info(toy_exp) filtered_samples <- filter(sample_info, group == \"A\") # Now you have filtered sample info but the original expression matrix! # This maintains synchronization filtered_exp <- filter_obs(toy_exp, group == \"A\") # Everything stays in sync!"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"pitfall-3-trying-to-remove-index-columns","dir":"Articles","previous_headings":"Common Pitfalls and How to Avoid Them ⚠️","what":"Pitfall 3: Trying to Remove Index Columns","title":"dplyr-Style Functions: Data Harmony in Action","text":"❌ won’t work expected: ✅ Embrace protection:","code":"# Index column protection prevents this - will throw an error! select_obs(toy_exp, -sample)   #> Error: #> ! You should not explicitly select or deselect the \"sample\" column in #>   `sample_info`. #> ℹ The \"sample\" column will be handled by `select_obs()` or `select_var()` #>   automatically. # Select the columns you want, let glyexp protect the index clean_exp <- select_obs(toy_exp, group, batch) get_sample_info(clean_exp) #> # A tibble: 6 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S2     A         2 #> 3 S3     A         1 #> 4 S4     B         2 #> 5 S5     B         1 #> 6 S6     B         2 # \"sample\" column automatically included for data integrity"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"pitfall-4-mismatched-operations","dir":"Articles","previous_headings":"Common Pitfalls and How to Avoid Them ⚠️","what":"Pitfall 4: Mismatched Operations","title":"dplyr-Style Functions: Data Harmony in Action","text":"❌ Don’t mix operations inappropriately: ✅ Use right function right data:","code":"# This doesn't make sense - you can't arrange sample info by variable properties arrange_obs(toy_exp, glycan_composition)  # glycan_composition is in var_info! # Arrange variables by their glycan composition arranged_by_composition <- arrange_var(toy_exp, glycan_composition) get_var_info(arranged_by_composition) #> # A tibble: 4 × 4 #>   variable protein peptide glycan_composition #>   <chr>    <chr>   <chr>   <chr>              #> 1 V3       PRO3    PEP3    H3N2               #> 2 V4       PRO3    PEP4    H3N2               #> 3 V1       PRO1    PEP1    H5N2               #> 4 V2       PRO2    PEP2    H5N2"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"performance-considerations-speed-meets-safety","dir":"Articles","previous_headings":"","what":"Performance Considerations: Speed Meets Safety 🏃‍♂️💨","title":"dplyr-Style Functions: Data Harmony in Action","text":"glyexp’s dplyr-style functions designed : 🚀 Fast: Built top highly optimized dplyr functions🛡️ Safe: Index column protection prevents data corruption🔄 Consistent: Automatic synchronization eliminates manual errors large datasets, consider: Filtering early pipeline reduce data size Using select_obs() select_var() keep needed columns Chaining operations efficiently minimize intermediate copies","code":"# Efficient pipeline: filter first, then manipulate efficient_pipeline <- toy_exp |>   filter_obs(group == \"A\") |>          # Reduce samples early   filter_var(protein == \"PRO1\") |>     # Reduce variables early   select_obs(group) |>                 # Keep only needed sample columns   select_var(glycan_composition)       # Keep only needed variable columns"},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"the-philosophy-behind-the-design","dir":"Articles","previous_headings":"","what":"The Philosophy Behind the Design 🧠","title":"dplyr-Style Functions: Data Harmony in Action","text":"glyexp’s dplyr-style functions embody simple powerful philosophy: “Think metadata, let data follow.” 🎯 design choice means: Mental Model Alignment: think terms samples variables, matrix indices Error Prevention: Automatic synchronization prevents common data analysis mistakes Familiar Syntax: know dplyr, already know 90% glyexp Composability: Functions chain together naturally complex analyses","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/dplyr-style-functions.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary 🎯","title":"dplyr-Style Functions: Data Harmony in Action","text":"glyexp’s dplyr-style functions experiment-specific data manipulators designed exclusively experiment() objects. provide four key capabilities: 🎼 Automatic Synchronization - Operations metadata automatically update expression matrix 🛡️ Index Column Protection - Critical relationship columns protected deletion 🔗 Familiar Syntax - Standard dplyr operations multi-table awareness 🎯 Type-Aware Operations - _obs() samples, _var() variables Start simple filter_obs() select_var(), build complex pipelines! 🎵","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/exp-type.html","id":"whats-the-big-deal-with-experiment-types","dir":"Articles","previous_headings":"","what":"What’s the big deal with experiment types?","title":"Experiment Types","text":"talk experiment types, ’re really talking two things: label stored exp_type field experiment() object’s metadata expected structure variable information table ’s thing: experiment specific type, functions glycoverse know expect data structure. ’s like contract data analysis functions. Don’t worry though— like friendly guidelines iron-clad rules. ’ll show means practice examples. Quick tip: ’re diving glydet glymotif, can safely skip traitomics traitproteomics sections focus first two types.","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/exp-type.html","id":"meet-the-four-experiment-types","dir":"Articles","previous_headings":"","what":"Meet the four experiment types","title":"Experiment Types","text":"glyexp package recognizes four distinct experiment types: “glycomics” - classic glycan-focused experiments “glycoproteomics” - glycans meet proteins “traitomics” - Derived traits glycan data “traitproteomics” - Derived traits protein level first two bread--butter glycobiology experiments. use glyread import data, ’ll automatically figure whether ’re dealing glycomics glycoproteomics set type accordingly— pretty neat, right? last two special creatures unique glycoverse ecosystem. ’re get functions glymotif glydet work magic data. Let’s dive type see makes tick.","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/exp-type.html","id":"glycomics","dir":"Articles","previous_headings":"Meet the four experiment types","what":"Glycomics","title":"Experiment Types","text":"Let’s start straightforward type: “glycomics”. classic glycan-focused experiment row variable information table represents single glycan (spectrum match ’re working MS data). expect variable information table: glycan_composition: glycan’s composition glyrepr::glycan_composition() object glycan_structure: (Optional) glycan’s structure glyrepr::glycan_structure() object ’s looks like practice:","code":"get_var_info(real_experiment2) #> # A tibble: 67 × 3 #>    variable glycan_composition                   glycan_structure                #>    <chr>    <comp>                               <struct>                        #>  1 V1       Man(3)GlcNAc(3)                      GlcNAc(?1-?)Man(?1-?)[Man(?1-?… #>  2 V2       Man(3)GlcNAc(7)                      GlcNAc(?1-?)[GlcNAc(?1-?)]Man(… #>  3 V3       Man(5)GlcNAc(2)                      Man(?1-?)[Man(?1-?)]Man(?1-?)[… #>  4 V4       Man(4)Gal(2)GlcNAc(4)Neu5Ac(2)       Neu5Ac(?2-?)Gal(?1-?)GlcNAc(?1… #>  5 V5       Man(3)Gal(1)GlcNAc(3)                Gal(?1-?)GlcNAc(?1-?)Man(?1-?)… #>  6 V6       Man(3)Gal(2)GlcNAc(4)Fuc(2)          Gal(?1-?)GlcNAc(?1-?)Man(?1-?)… #>  7 V7       Man(3)GlcNAc(3)Fuc(1)                GlcNAc(?1-?)Man(?1-?)[Man(?1-?… #>  8 V8       Man(3)GlcNAc(4)                      GlcNAc(?1-?)Man(?1-?)[GlcNAc(?… #>  9 V9       Man(3)Gal(2)GlcNAc(5)Neu5Ac(1)       Neu5Ac(?2-?)Gal(?1-?)GlcNAc(?1… #> 10 V10      Man(3)Gal(1)GlcNAc(5)Fuc(1)Neu5Ac(1) Neu5Ac(?2-?)Gal(?1-?)GlcNAc(?1… #> # ℹ 57 more rows"},{"path":"https://glycoverse.github.io/glyexp/articles/exp-type.html","id":"glycoproteomics","dir":"Articles","previous_headings":"Meet the four experiment types","what":"Glycoproteomics","title":"Experiment Types","text":"Now step “glycoproteomics”—things get interesting! , row represents glycopeptide glycoform (peptide spectrum matches). Think glycomics data protein context, telling just glycans , ’re attached. variable information table include: protein: protein UniProt accession (character string) protein_site: glycosylation site position protein (integer) glycan_composition: glycan composition glyrepr::glycan_composition() object glycan_structure: (Optional) glycan structure glyrepr::glycan_structure() object ’s real example illustrate:","code":"get_var_info(real_experiment) #> # A tibble: 4,262 × 8 #>    variable peptide   peptide_site protein protein_site gene  glycan_composition #>    <chr>    <chr>            <int> <chr>          <int> <chr> <comp>             #>  1 GP1      JKTQGK               1 P08185           176 SERP… Hex(5)HexNAc(4)Ne… #>  2 GP2      HSHNJJSS…            5 P04196           344 HRG   Hex(5)HexNAc(4)Ne… #>  3 GP3      HSHNJJSS…            5 P04196           344 HRG   Hex(5)HexNAc(4)    #>  4 GP4      HSHNJJSS…            5 P04196           344 HRG   Hex(5)HexNAc(4)Ne… #>  5 GP5      HJSTGCLR             2 P10909           291 CLU   Hex(6)HexNAc(5)    #>  6 GP6      HSHNJJSS…            5 P04196           344 HRG   Hex(5)HexNAc(4)Ne… #>  7 GP7      HSHNJJSS…            6 P04196           345 HRG   Hex(5)HexNAc(4)    #>  8 GP8      HSHNJJSS…            5 P04196           344 HRG   Hex(5)HexNAc(4)dH… #>  9 GP9      HSHNJJSS…            5 P04196           344 HRG   Hex(4)HexNAc(3)    #> 10 GP10     HSHNJJSS…            5 P04196           344 HRG   Hex(4)HexNAc(4)Ne… #> # ℹ 4,252 more rows #> # ℹ 1 more variable: glycan_structure <struct>"},{"path":"https://glycoverse.github.io/glyexp/articles/exp-type.html","id":"traitomics","dir":"Articles","previous_headings":"Meet the four experiment types","what":"Traitomics","title":"Experiment Types","text":"’s things get uniquely glycoverse! traitomics traitproteomics special experiment types emerge transform data using glydet::derive_traits() glymotif::quantify_motifs(). Starting traitomics: feed glycomics experiment derive_traits(), get back traitomics experiment. Instead measuring individual glycans sample, ’re now looking derived traits—think higher-level summary glycan data. variable information table pretty flexible —mandatory columns. However, ’ll typically see: trait column (using derive_traits()) motif column (using quantify_motifs())","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/exp-type.html","id":"traitproteomics","dir":"Articles","previous_headings":"Meet the four experiment types","what":"Traitproteomics","title":"Experiment Types","text":"Last least, traitproteomics—sophisticated experiment types. apply derive_traits() glycoproteomics experiment, get traitproteomics experiment back. ’s key insight: instead tracking individual glycans protein site, ’re now measuring derived traits site. Think glycosylation site little glycome, ’re summarizing characteristics mini-glycome. Essential columns variable information table: protein: protein UniProt accession (character string) protein_site: glycosylation site position (integer) Plus ’ll get: trait column (derive_traits()) motif column (quantify_motifs()) ’s key difference: glycoproteomics, different sites can completely different glycan repertoires. traitproteomics, every site gets scored set traits motifs—’s like standardized metrics across glycosylation sites.","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/exp-type.html","id":"do-you-need-to-worry-about-experiment-types","dir":"Articles","previous_headings":"","what":"Do you need to worry about experiment types?","title":"Experiment Types","text":"short answer? really! Experiment types work behind scenes quite intuitively. ’ll mostly encounter two situations: Reading documentation - see references specific experiment types Error messages - Like “Expecting glycoproteomics experiment, got traitproteomics experiment” reason types matter different functions different expectations. instance: glymotif::quantify_motifs() wants glycomics glycoproteomics data glystats::gly_enrich_go() expects glycoproteomics traitproteomics experiments might need care: main scenario ’re manually creating experiment object using experiment(). case, ’ll want set exp_type field match data structure. Important warning: ’ve created experiment object, resist temptation manually fiddle exp_type field. break implicit contract data glycoverse functions—nobody wants !","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/glyexp.html","id":"your-first-steps-into-the-glycoverse","dir":"Articles","previous_headings":"","what":"Your First Steps into the Glycoverse","title":"Get Started with glyexp","text":"Let’s dive trusty toy experiment - think training wheels tackle real deal. Look beautiful summary! print experiment() object, ’s like getting snapshot entire experimental world - variables, observations, metadata makes data meaningful. Now, let’s peek hood. can extract three core components faster can say “glycosylation”:","code":"toy_exp <- toy_experiment toy_exp #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 6 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>"},{"path":"https://glycoverse.github.io/glyexp/articles/glyexp.html","id":"the-expression-matrix---your-datas-heart-and-soul","dir":"Articles","previous_headings":"Your First Steps into the Glycoverse","what":"🧬 The Expression Matrix - Your Data’s Heart and Soul","title":"Get Started with glyexp","text":"matrix magic happens - rows variables (molecules), columns observations (samples), numbers tell biological story.","code":"get_expr_mat(toy_exp) #>    S1 S2 S3 S4 S5 S6 #> V1  1  5  9 13 17 21 #> V2  2  6 10 14 18 22 #> V3  3  7 11 15 19 23 #> V4  4  8 12 16 20 24"},{"path":"https://glycoverse.github.io/glyexp/articles/glyexp.html","id":"variable-information---meet-your-molecules","dir":"Articles","previous_headings":"Your First Steps into the Glycoverse","what":"🏷️ Variable Information - Meet Your Molecules","title":"Get Started with glyexp","text":"Think molecular address book - every variable gets detailed profile.","code":"get_var_info(toy_exp) #> # A tibble: 4 × 4 #>   variable protein peptide glycan_composition #>   <chr>    <chr>   <chr>   <chr>              #> 1 V1       PRO1    PEP1    H5N2               #> 2 V2       PRO2    PEP2    H5N2               #> 3 V3       PRO3    PEP3    H3N2               #> 4 V4       PRO3    PEP4    H3N2"},{"path":"https://glycoverse.github.io/glyexp/articles/glyexp.html","id":"sample-information---know-your-experiments","dir":"Articles","previous_headings":"Your First Steps into the Glycoverse","what":"📋 Sample Information - Know Your Experiments","title":"Get Started with glyexp","text":"? experimental diary - tracking every condition, timepoint, treatment. ’s cool part: Notice “variable” column get_var_info() “sample” column get_sample_info() perfectly match row column names expression matrix? ’s accident! index columns - secret sauce keeps everything synchronized. ’re like GPS coordinates ensure data stays connected matter transformations throw .","code":"get_sample_info(toy_exp) #> # A tibble: 6 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S2     A         2 #> 3 S3     A         1 #> 4 S4     B         2 #> 5 S5     B         1 #> 6 S6     B         2"},{"path":"https://glycoverse.github.io/glyexp/articles/glyexp.html","id":"data-wrangling-made-easy---dplyr-meets-glyexp","dir":"Articles","previous_headings":"","what":"Data Wrangling Made Easy - dplyr Meets glyexp","title":"Get Started with glyexp","text":"’ve ever used dplyr (hasn’t?), ’re already 90% way ! 🎉 every dplyr function know love, glyexp gives two specialized versions: _obs() functions: work sample metadata _var() functions: work variable annotations Let’s see action. Want focus just group “” samples? Let’s check happened sample info: Beautiful! ’s magic really shines - check expression matrix: 🎪 Ta-da! expression matrix automatically filtered match! ’s like well-trained assistant anticipates every move. filter_obs() nutshell: “Hey, filter sample info way, oh yeah, make sure everything else follows suit.” , flawlessly. Variable filtering works way: Notice functions support pipe operator (|>)? ’s dplyr DNA action! pattern simple: glyexp functions just like dplyr cousins, two superpowers: expect return experiment() objects (keeping data ecosystem intact) treat index columns like precious cargo (accidental deletions !)","code":"subset_exp <- filter_obs(toy_exp, group == \"A\") get_sample_info(subset_exp) #> # A tibble: 3 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S2     A         2 #> 3 S3     A         1 get_expr_mat(subset_exp) #>    S1 S2 S3 #> V1  1  5  9 #> V2  2  6 10 #> V3  3  7 11 #> V4  4  8 12 toy_exp |>   filter_obs(group == \"A\") |>   filter_var(glycan_composition == \"H5N2\") |>   get_expr_mat() #>    S1 S2 S3 #> V1  1  5  9 #> V2  2  6 10"},{"path":"https://glycoverse.github.io/glyexp/articles/glyexp.html","id":"complete-dplyr-function-reference","dir":"Articles","previous_headings":"","what":"Complete dplyr Function Reference","title":"Get Started with glyexp","text":"’s complete toolkit supported dplyr-style functions. functions orchestrate seamless coordination three data types - expression matrix, sample information, variable information - ensuring everything stays perfectly synchronized: magic ingredient? Every single one functions automatically updates expression matrix match metadata operations. Filter half samples? matrix follows suit. Rearrange variables? matrix dances tune. dplyr functions? functions directly supported (like distinct(), pull(), count(), etc.), simply extract tibble first go wild:","code":"# Extract the tibble, then use any dplyr function you want toy_exp |>   get_sample_info() |>   distinct(group)  toy_exp |>   get_var_info() |>   pull(protein) |>   unique()  toy_exp |>   get_sample_info() |>   count(group)"},{"path":"https://glycoverse.github.io/glyexp/articles/glyexp.html","id":"the-sacred-index-columns---handle-with-care","dir":"Articles","previous_headings":"","what":"The Sacred Index Columns - Handle with Care","title":"Get Started with glyexp","text":"Remember index columns mentioned? ’s golden rule: Don’t mess directly! reason simple: glyexp relies synchronize expression matrix, sample info, variable info. Look picture understand better:  Think foundation data house - can redecorate want, don’t touch support beams. Want select specific columns sample info? Easy: See “sample” column (trusty index) stuck around? ’s glyexp protective data integrity. Even try sneaky, ’s got back: Nice try, index column isn’t going anywhere! 😄","code":"toy_exp |>   select_obs(group) |>   get_sample_info() #> # A tibble: 6 × 2 #>   sample group #>   <chr>  <chr> #> 1 S1     A     #> 2 S2     A     #> 3 S3     A     #> 4 S4     B     #> 5 S5     B     #> 6 S6     B toy_exp |>   select_obs(-starts_with(\"sample\")) |>   get_sample_info() #> # A tibble: 6 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S2     A         2 #> 3 S3     A         1 #> 4 S4     B         2 #> 5 S5     B         1 #> 6 S6     B         2"},{"path":"https://glycoverse.github.io/glyexp/articles/glyexp.html","id":"slicing-and-dicing---matrix-style-subsetting","dir":"Articles","previous_headings":"","what":"Slicing and Dicing - Matrix-Style Subsetting","title":"Get Started with glyexp","text":"Want subset experiment? Think matrix indexing, smarter: grabs first 3 samples, like good butler, updates everything else accordingly: expression matrix sample info perfectly sync. ’s like ’re dancing tune!","code":"subset_exp <- toy_exp[, 1:3] get_expr_mat(subset_exp) #>    S1 S2 S3 #> V1  1  5  9 #> V2  2  6 10 #> V3  3  7 11 #> V4  4  8 12 get_sample_info(subset_exp) #> # A tibble: 3 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S2     A         2 #> 3 S3     A         1"},{"path":"https://glycoverse.github.io/glyexp/articles/glyexp.html","id":"merging-and-splitting---the-dynamic-duo","dir":"Articles","previous_headings":"","what":"Merging and Splitting - The Dynamic Duo","title":"Get Started with glyexp","text":"Imagine : run favorite glycopeptide identification software two times two batches, use glyread load results two [experiment()]s. combine single [experiment()]? answer merge(): quite complex, can rely merge() handle . want keep batch information, can use mutate_obs() add ID column merging. one experiment merge? Put list use purrr::reduce() merge : opposite merge() split(), splits [experiment()] list [experiment()]s. can provide column split , unique values column used names list. Now “” experiment contains samples group “”, “B” experiment group “B”.","code":"merge(exp1, exp2) purrr::reduce(list(exp1, exp2, exp3), merge) split(toy_exp, group, where = \"sample_info\") #> $A #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 3 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr> #>  #> $B #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 3 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>"},{"path":"https://glycoverse.github.io/glyexp/articles/glyexp.html","id":"when-you-need-to-break-free---the-tibble-escape-hatch","dir":"Articles","previous_headings":"","what":"When You Need to Break Free - The Tibble Escape Hatch","title":"Get Started with glyexp","text":"glycoverse ecosystem pretty comprehensive, know times need venture beyond cozy world. moment comes, can always fall back basic R data structures get_expr_mat(), get_sample_info(), get_var_info(). Alternatively, use as_tibble() convert experiment() tibble tidy-format: Pro tip: tibbles can get really long (think novel-length), especially rich metadata. Smart analysts filter experiments first: Much manageable, right?","code":"as_tibble(toy_exp) #> # A tibble: 24 × 8 #>    sample group batch variable protein peptide glycan_composition value #>    <chr>  <chr> <dbl> <chr>    <chr>   <chr>   <chr>              <int> #>  1 S1     A         1 V1       PRO1    PEP1    H5N2                   1 #>  2 S2     A         2 V1       PRO1    PEP1    H5N2                   5 #>  3 S3     A         1 V1       PRO1    PEP1    H5N2                   9 #>  4 S4     B         2 V1       PRO1    PEP1    H5N2                  13 #>  5 S5     B         1 V1       PRO1    PEP1    H5N2                  17 #>  6 S6     B         2 V1       PRO1    PEP1    H5N2                  21 #>  7 S1     A         1 V2       PRO2    PEP2    H5N2                   2 #>  8 S2     A         2 V2       PRO2    PEP2    H5N2                   6 #>  9 S3     A         1 V2       PRO2    PEP2    H5N2                  10 #> 10 S4     B         2 V2       PRO2    PEP2    H5N2                  14 #> # ℹ 14 more rows toy_exp |>   filter_var(glycan_composition == \"H5N2\") |>   select_obs(group) |>   select_var(-glycan_composition) |>   as_tibble() #> # A tibble: 12 × 6 #>    sample group variable protein peptide value #>    <chr>  <chr> <chr>    <chr>   <chr>   <int> #>  1 S1     A     V1       PRO1    PEP1        1 #>  2 S2     A     V1       PRO1    PEP1        5 #>  3 S3     A     V1       PRO1    PEP1        9 #>  4 S4     B     V1       PRO1    PEP1       13 #>  5 S5     B     V1       PRO1    PEP1       17 #>  6 S6     B     V1       PRO1    PEP1       21 #>  7 S1     A     V2       PRO2    PEP2        2 #>  8 S2     A     V2       PRO2    PEP2        6 #>  9 S3     A     V2       PRO2    PEP2       10 #> 10 S4     B     V2       PRO2    PEP2       14 #> 11 S5     B     V2       PRO2    PEP2       18 #> 12 S6     B     V2       PRO2    PEP2       22"},{"path":"https://glycoverse.github.io/glyexp/articles/glyexp.html","id":"standing-on-the-shoulders-of-giants","dir":"Articles","previous_headings":"","what":"Standing on the Shoulders of Giants","title":"Get Started with glyexp","text":"Designing experiment() wasn’t done vacuum - learned amazing predecessors: SummarizedExperiment 📊 granddaddy omics data containers Bioconductor. Solid rock RNA-seq, quite “tidy” enough taste. tidySummarizedExperiment 🧹 brilliant attempt bring tidy principles SummarizedExperiment tidySummarizedExperiment package. love concept, felt cramming everything one tibble doesn’t quite capture mental model separated data types. massdataset 🔬 closest cousin! massdataset package gets many things right - tidy operations, clean data separation, perfect mass spec data. especially admire data processing history tracking (reproducibility FTW!). ’s twist: object-oriented programming merits, believe R users think functionally. code reproducibility trail - elegant, transparent, familiar every R user. Philosophy 💭 chose functional programming path feels like home R users. hidden states, mysterious transformations - just clear, chainable functions exactly say tin. Huge thanks developers paved road. glyexp exists groundbreaking work! 🙏","code":""},{"path":"https://glycoverse.github.io/glyexp/articles/glyexp.html","id":"whats-next","dir":"Articles","previous_headings":"","what":"What’s Next?","title":"Get Started with glyexp","text":"Now basic understanding experiment(). Next, can learn use experiment() analysis. Creating Experiments Experiment Types Dplyr-Style Functions","code":""},{"path":"https://glycoverse.github.io/glyexp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bin Fu. Author, maintainer.","code":""},{"path":"https://glycoverse.github.io/glyexp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fu B (2025). glyexp: Glycoproteomics Glycomics Experiments. R package version 0.10.1.9000, https://glycoverse.github.io/glyexp/.","code":"@Manual{,   title = {glyexp: Glycoproteomics and Glycomics Experiments},   author = {Bin Fu},   year = {2025},   note = {R package version 0.10.1.9000},   url = {https://glycoverse.github.io/glyexp/}, }"},{"path":"https://glycoverse.github.io/glyexp/index.html","id":"glyexp-","dir":"","previous_headings":"","what":"Glycoproteomics and Glycomics Experiments","title":"Glycoproteomics and Glycomics Experiments","text":"goal glyexp manage data glycoproteomics glycomics experiments tidy way.","code":""},{"path":"https://glycoverse.github.io/glyexp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Glycoproteomics and Glycomics Experiments","text":"can install latest release glyexp GitHub : install development version:","code":"# install.packages(\"remotes\") remotes::install_github(\"glycoverse/glyexp@*release\") remotes::install_github(\"glycoverse/glyexp\")"},{"path":"https://glycoverse.github.io/glyexp/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Glycoproteomics and Glycomics Experiments","text":"🚀 Get started: 🔧 dplyr-style data manipulation: 📚 Reference: ","code":""},{"path":"https://glycoverse.github.io/glyexp/index.html","id":"role-in-glycoverse","dir":"","previous_headings":"","what":"Role in glycoverse","title":"Glycoproteomics and Glycomics Experiments","text":"experiment() class provides consistent interface glycoprotemics glycomics data. packages glycoverse ecosystem know extract information experiment() object. , put data experiment() object pass around. Let packages heavy lifting.","code":""},{"path":"https://glycoverse.github.io/glyexp/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Glycoproteomics and Glycomics Experiments","text":"","code":"library(glyexp) library(magrittr)  # Create a toy experiment a_little_toy <- toy_experiment a_little_toy #>  #> ── Experiment ────────────────────────────────────────────────────────────────── #> ℹ Expression matrix: 6 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr> get_expr_mat(a_little_toy) #>    S1 S2 S3 S4 S5 S6 #> V1  1  5  9 13 17 21 #> V2  2  6 10 14 18 22 #> V3  3  7 11 15 19 23 #> V4  4  8 12 16 20 24 get_sample_info(a_little_toy) #> # A tibble: 6 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S2     A         2 #> 3 S3     A         1 #> 4 S4     B         2 #> 5 S5     B         1 #> 6 S6     B         2 get_var_info(a_little_toy) #> # A tibble: 4 × 4 #>   variable protein peptide glycan_composition #>   <chr>    <chr>   <chr>   <chr>              #> 1 V1       PRO1    PEP1    H5N2               #> 2 V2       PRO2    PEP2    H5N2               #> 3 V3       PRO3    PEP3    N3N2               #> 4 V4       PRO3    PEP4    N3N2 # Filter samples a_little_toy %>%    filter_obs(group == \"A\") %>%   filter_var(protein == \"PRO1\") #>  #> ── Experiment ────────────────────────────────────────────────────────────────── #> ℹ Expression matrix: 3 samples, 1 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>"},{"path":"https://glycoverse.github.io/glyexp/reference/arrange_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange sample or variable information — arrange_obs","title":"Arrange sample or variable information — arrange_obs","text":"Arrange sample variable information tibble experiment(). syntax dplyr::arrange() used. example, arrange samples \"group\" column, use arrange_obs(exp, group). actually calls dplyr::arrange() sample information tibble group column, updates expression matrix accordingly match new order.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/arrange_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange sample or variable information — arrange_obs","text":"","code":"arrange_obs(exp, ...)  arrange_var(exp, ...)"},{"path":"https://glycoverse.github.io/glyexp/reference/arrange_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange sample or variable information — arrange_obs","text":"exp experiment(). ... <data-masking> Variables arrange , passed dplyr::arrange() internally.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/arrange_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange sample or variable information — arrange_obs","text":"new experiment() object.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/arrange_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange sample or variable information — arrange_obs","text":"","code":"# Create a toy experiment for demonstration exp <- toy_experiment # Add a type column to the variable information for demonstration exp$var_info$type <- c(\"Y\", \"X\", \"Z\", \"Y\")  # Arrange samples by group column arranged_exp <- arrange_obs(exp, group) arranged_exp$sample_info #> # A tibble: 6 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S2     A         2 #> 3 S3     A         1 #> 4 S4     B         2 #> 5 S5     B         1 #> 6 S6     B         2 arranged_exp$expr_mat #>    S1 S2 S3 S4 S5 S6 #> V1  1  5  9 13 17 21 #> V2  2  6 10 14 18 22 #> V3  3  7 11 15 19 23 #> V4  4  8 12 16 20 24  # Arrange variables by type column   arranged_exp <- arrange_var(exp, type) arranged_exp$var_info #> # A tibble: 4 × 5 #>   variable protein peptide glycan_composition type  #>   <chr>    <chr>   <chr>   <chr>              <chr> #> 1 V2       PRO2    PEP2    H5N2               X     #> 2 V1       PRO1    PEP1    H5N2               Y     #> 3 V4       PRO3    PEP4    H3N2               Y     #> 4 V3       PRO3    PEP3    H3N2               Z     arranged_exp$expr_mat #>    S1 S2 S3 S4 S5 S6 #> V2  2  6 10 14 18 22 #> V1  1  5  9 13 17 21 #> V4  4  8 12 16 20 24 #> V3  3  7 11 15 19 23  # Arrange by multiple columns arrange_obs(exp, group, sample)$sample_info #> # A tibble: 6 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S2     A         2 #> 3 S3     A         1 #> 4 S4     B         2 #> 5 S5     B         1 #> 6 S6     B         2"},{"path":"https://glycoverse.github.io/glyexp/reference/as_se.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert experiment to SummarizedExperiment — as_se","title":"Convert experiment to SummarizedExperiment — as_se","text":"Convert experiment() object SummarizedExperiment object. function maps experiment structure SummarizedExperiment format: expr_mat becomes main assay sample_info becomes colData var_info becomes rowData meta_data becomes metadata","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/as_se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert experiment to SummarizedExperiment — as_se","text":"","code":"as_se(exp, assay_name = \"counts\")"},{"path":"https://glycoverse.github.io/glyexp/reference/as_se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert experiment to SummarizedExperiment — as_se","text":"exp experiment() object convert. assay_name Character string specifying name assay. Default \"counts\".","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/as_se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert experiment to SummarizedExperiment — as_se","text":"SummarizedExperiment object.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/as_se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert experiment to SummarizedExperiment — as_se","text":"","code":"# Convert toy experiment to SummarizedExperiment se <- as_se(toy_experiment) se #> class: SummarizedExperiment  #> dim: 4 6  #> metadata(2): exp_type glycan_type #> assays(1): counts #> rownames(4): V1 V2 V3 V4 #> rowData names(3): protein peptide glycan_composition #> colnames(6): S1 S2 ... S5 S6 #> colData names(2): group batch"},{"path":"https://glycoverse.github.io/glyexp/reference/as_tibble.glyexp_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an experiment to a tibble — as_tibble.glyexp_experiment","title":"Convert an experiment to a tibble — as_tibble.glyexp_experiment","text":"Convert experiment object tibble \"tidy\" format. , row unique combination \"sample\" \"variable\", observation (abundance) \"value\" column. Additional columns sample variable information included. format also known \"long\" format. Usually want columns sample information variable information tibbles included output tibble, make output tibble \"wide\". can specify columns include output tibble passing column names sample_cols var_cols arguments. <data-masking> syntax used . default, columns included.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/as_tibble.glyexp_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an experiment to a tibble — as_tibble.glyexp_experiment","text":"","code":"# S3 method for class 'glyexp_experiment' as_tibble(   x,   sample_cols = tidyselect::everything(),   var_cols = tidyselect::everything(),   ... )"},{"path":"https://glycoverse.github.io/glyexp/reference/as_tibble.glyexp_experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an experiment to a tibble — as_tibble.glyexp_experiment","text":"x experiment(). sample_cols <data-masking> Columns include sample information tibble. var_cols <data-masking> Columns include variable information tibble. ... Ignored.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/as_tibble.glyexp_experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an experiment to a tibble — as_tibble.glyexp_experiment","text":"tibble.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/as_tibble.glyexp_experiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an experiment to a tibble — as_tibble.glyexp_experiment","text":"","code":"library(tibble)  # Create a toy experiment for demonstration toy_exp <- toy_experiment toy_exp #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 6 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>  # Convert the experiment to a tibble as_tibble(toy_exp) #> # A tibble: 24 × 8 #>    sample group batch variable protein peptide glycan_composition value #>    <chr>  <chr> <dbl> <chr>    <chr>   <chr>   <chr>              <int> #>  1 S1     A         1 V1       PRO1    PEP1    H5N2                   1 #>  2 S2     A         2 V1       PRO1    PEP1    H5N2                   5 #>  3 S3     A         1 V1       PRO1    PEP1    H5N2                   9 #>  4 S4     B         2 V1       PRO1    PEP1    H5N2                  13 #>  5 S5     B         1 V1       PRO1    PEP1    H5N2                  17 #>  6 S6     B         2 V1       PRO1    PEP1    H5N2                  21 #>  7 S1     A         1 V2       PRO2    PEP2    H5N2                   2 #>  8 S2     A         2 V2       PRO2    PEP2    H5N2                   6 #>  9 S3     A         1 V2       PRO2    PEP2    H5N2                  10 #> 10 S4     B         2 V2       PRO2    PEP2    H5N2                  14 #> # ℹ 14 more rows  # specify columns to include as_tibble(toy_exp, sample_cols = group, var_cols = c(protein, peptide)) #> # A tibble: 24 × 6 #>    sample group variable protein peptide value #>    <chr>  <chr> <chr>    <chr>   <chr>   <int> #>  1 S1     A     V1       PRO1    PEP1        1 #>  2 S2     A     V1       PRO1    PEP1        5 #>  3 S3     A     V1       PRO1    PEP1        9 #>  4 S4     B     V1       PRO1    PEP1       13 #>  5 S5     B     V1       PRO1    PEP1       17 #>  6 S6     B     V1       PRO1    PEP1       21 #>  7 S1     A     V2       PRO2    PEP2        2 #>  8 S2     A     V2       PRO2    PEP2        6 #>  9 S3     A     V2       PRO2    PEP2       10 #> 10 S4     B     V2       PRO2    PEP2       14 #> # ℹ 14 more rows"},{"path":"https://glycoverse.github.io/glyexp/reference/count_compositions.html","id":null,"dir":"Reference","previous_headings":"","what":"Identification overview — count_compositions","title":"Identification overview — count_compositions","text":"functions used identify number glycan compositions, glycan structures, glycopeptides, peptides, glycoforms, glycoproteins, glycosites experiment().","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/count_compositions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identification overview — count_compositions","text":"","code":"count_compositions(x)  count_structures(x)  count_peptides(x)  count_glycopeptides(x, count_struct = NULL)  count_glycoforms(x, count_struct = NULL)  count_proteins(x)  count_glycosites(x)"},{"path":"https://glycoverse.github.io/glyexp/reference/count_compositions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identification overview — count_compositions","text":"x experiment() object. count_struct count_glycopeptides() count_glycoforms(), whether count number glycan structures glycopeptides. TRUE, glycopeptides glycoforms bearing different glycan structures glycan composition counted different ones. provided (NULL), defaults TRUE glycan_structure column exists variable information tibble, otherwise FALSE.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/count_compositions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identification overview — count_compositions","text":"integer. count_compositions(): number glycan compositions. count_structures(): number glycan structures. count_peptides(): number peptides. count_glycopeptides(): number unique combinations peptides, sites, glycans. count_glycoforms(): number unique combinations proteins, sites, glycans. count_proteins(): number proteins. count_glycosites(): number unique combinations proteins sites.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/count_compositions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identification overview — count_compositions","text":"following columns required variable information tibble: count_compositions(): glycan_composition count_structures(): glycan_structure count_peptides(): peptide count_glycopeptides(): glycan_composition glycan_structure, peptide, peptide_site count_glycoforms(): glycan_composition glycan_structure, protein proteins, protein_site protein_sites count_proteins(): protein proteins count_glycosites(): protein proteins, protein_site protein_sites can use count_struct parameter control count glycopeptides glycoforms, either glycan structures glycan compositions.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/dim.glyexp_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimensions of an experiment — dim.glyexp_experiment","title":"Dimensions of an experiment — dim.glyexp_experiment","text":"Retrieve dimensions experiment object, .e. number variables samples.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/dim.glyexp_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimensions of an experiment — dim.glyexp_experiment","text":"","code":"# S3 method for class 'glyexp_experiment' dim(x)  # S3 method for class 'glyexp_experiment' dim(x) <- value"},{"path":"https://glycoverse.github.io/glyexp/reference/dim.glyexp_experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimensions of an experiment — dim.glyexp_experiment","text":"x experiment object. value Ignored.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/dim.glyexp_experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimensions of an experiment — dim.glyexp_experiment","text":"vector two elements: number variables number samples.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/dimnames.glyexp_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimname for experiment — dimnames.glyexp_experiment","title":"Dimname for experiment — dimnames.glyexp_experiment","text":"dimnames method experiment() objects dimnames expression matrix.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/dimnames.glyexp_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimname for experiment — dimnames.glyexp_experiment","text":"","code":"# S3 method for class 'glyexp_experiment' dimnames(x, ...)"},{"path":"https://glycoverse.github.io/glyexp/reference/dimnames.glyexp_experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimname for experiment — dimnames.glyexp_experiment","text":"x experiment(). ... Ignored.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/dimnames.glyexp_experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimname for experiment — dimnames.glyexp_experiment","text":"list dimnames expression matrix.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new experiment — experiment","title":"Create a new experiment — experiment","text":"data container glycoproteomics glycomics experiment. Expression matrix, sample information, variable information required managed experiment object. acts data core glycoverse ecosystem.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new experiment — experiment","text":"","code":"experiment(   expr_mat,   sample_info = NULL,   var_info = NULL,   exp_type = \"others\",   glycan_type = NULL,   coerce_col_types = TRUE,   check_col_types = TRUE,   ... )  is_experiment(x)"},{"path":"https://glycoverse.github.io/glyexp/reference/experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new experiment — experiment","text":"expr_mat expression matrix samples columns variables rows. sample_info tibble column named \"sample\", columns useful information samples, e.g. group, batch, sex, age, etc. NULL (default), tibble one column named \"sample\" created, column names expr_mat. var_info tibble column named \"variable\", columns useful information variables, e.g. protein name, peptide, glycan composition, etc. NULL (default), tibble one column named \"variable\" created, row names expr_mat. Must provided exp_type \"others\". exp_type type experiment, \"glycomics\", \"glycoproteomics\", \"traitomics\", \"traitproteomics\", \"others\". Default \"others\". glycan_type type glycan, \"N\" \"O\". Can NULL exp_type \"others\". coerce_col_types common column types coerced. Default TRUE. TRUE, columns \"Column conventions\" section coerced expected types. Skipped \"others\" type even TRUE. check_col_types column type conventions checked. Default TRUE. Type checking performed column coercion (coerce_col_types TRUE). Skipped \"others\" type even TRUE. ... meta data experiment. x object check.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new experiment — experiment","text":"experiment(). input data wrong, error raised. logical value.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/experiment.html","id":"requirements-of-the-input-data","dir":"Reference","previous_headings":"","what":"Requirements of the input data","title":"Create a new experiment — experiment","text":"Expression matrix: Must numeric matrix variables rows samples columns. column names must correspond sample IDs. row names must correspond variable IDs. Sample information (sample_info): Must tibble column named \"sample\" (sample ID). value \"sample\" must unique. set \"sample\" values must match column names expression matrix (order matter). Variable information (var_info): Must tibble column named \"variable\" (variable ID). value \"variable\" must unique. set \"variable\" values must match row names expression matrix (order matter). function automatically reorder expression matrix match order \"sample\" \"variable\" info tables.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/experiment.html","id":"column-requirements","dir":"Reference","previous_headings":"","what":"Column requirements","title":"Create a new experiment — experiment","text":"columns required compulsorily variable information tibble valid experiment. depends experiment type. \"glycomics\": glycan_composition. \"glycoproteomics\": protein, protein_site, glycan_composition. \"traitomics\": required columns. \"traitproteomics\": protein, protein_site. \"others\": required columns. See \"Column conventions\" section detailed description columns. last two types experiments created glydet package. Normally need manually create .","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/experiment.html","id":"column-conventions","dir":"Reference","previous_headings":"","what":"Column conventions","title":"Create a new experiment — experiment","text":"glycoverse conserved column names sample_info var_info make everything work seamlessly. mandatory, following conventions make life easier. sample_info: group: factor, treatment/condition/grouping, used many glystats glyvis functions. batch: factor, batch information, used glyclean::correct_batch_effect(). bio_rep: factor, biological replicate, may used future. var_info: protein: character, protein Uniprot accession. protein_site: integer, glycosylation site position protein. gene: character, gene symbol. peptide: character, peptide sequence. peptide_site: integer, glycosylation site position peptide. glycan_composition: glyrepr::glycan_composition(), glycan composition. glycan_structure: glyrepr::glycan_structure(), glycan structure.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/experiment.html","id":"meta-data","dir":"Reference","previous_headings":"","what":"Meta data","title":"Create a new experiment — experiment","text":"meta data can added meta_data attribute. meta_data list additional information experiment. Two meta data fields required: exp_type: \"glycomics\", \"glycoproteomics\", \"traitomics\", \"traitproteomics\", \"others\" glycan_type: \"N\" \"O\" (can NULL exp_type \"others\") meta data added glycoverse packages purposes.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/experiment.html","id":"index-columns","dir":"Reference","previous_headings":"","what":"Index columns","title":"Create a new experiment — experiment","text":"index columns backbone keep data synchronized: \"sample\" column sample_info must match column names expr_mat. \"variable\" column var_info must match row names expr_mat. columns act unique identifiers, ensuring expression matrix, sample information, variable information always stay sync, matter filter, arrange, subset data.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/experiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new experiment — experiment","text":"","code":"# The minimum required input is an expression matrix. expr_mat <- matrix(runif(9), nrow = 3, ncol = 3) colnames(expr_mat) <- c(\"S1\", \"S2\", \"S3\") rownames(expr_mat) <- c(\"V1\", \"V2\", \"V3\") experiment(expr_mat) #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 3 samples, 3 variables #> ℹ Sample information fields: none #> ℹ Variable information fields: none  # Or with more detailed information. sample_info <- tibble::tibble(sample = c(\"S1\", \"S2\", \"S3\"), group = c(\"A\", \"B\", \"A\")) var_info <- tibble::tibble(   variable = c(\"V1\", \"V2\", \"V3\"),   glycan_composition = glyrepr::glycan_composition(c(Hex = 1)) ) experiment(expr_mat, sample_info, var_info, exp_type = \"glycomics\", glycan_type = \"N\") #> Column group converted to <factor>. #>  #> ── Glycomics Experiment ──────────────────────────────────────────────────────── #> ℹ Expression matrix: 3 samples, 3 variables #> ℹ Sample information fields: group <fct> #> ℹ Variable information fields: glycan_composition <comp>"},{"path":"https://glycoverse.github.io/glyexp/reference/filter_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter samples or variables of an experiment — filter_obs","title":"Filter samples or variables of an experiment — filter_obs","text":"Getting subset experiment() filtering samples variables. syntax dplyr::filter() used. example, get subset experiment keeping \"HC\" samples, use filter_obs(exp, group == \"HC\"). actually calls dplyr::filter() sample information tibble condition group == \"HC\", updates expression matrix accordingly. samples variables left filtering, error thrown.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/filter_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter samples or variables of an experiment — filter_obs","text":"","code":"filter_obs(exp, ...)  filter_var(exp, ...)"},{"path":"https://glycoverse.github.io/glyexp/reference/filter_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter samples or variables of an experiment — filter_obs","text":"exp experiment(). ... <data-masking> Expression filter samples variables. passed dplyr::filter() internally.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/filter_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter samples or variables of an experiment — filter_obs","text":"new experiment() object.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/filter_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter samples or variables of an experiment — filter_obs","text":"","code":"library(magrittr)  # Create a toy experiment for demonstration exp <- toy_experiment # Add a type column to the variable information for demonstration exp$var_info$type <- c(\"X\", \"X\", \"Y\", \"Y\")  # Filter samples sub_exp_1 <- filter_obs(exp, group == \"A\") get_sample_info(sub_exp_1) #> # A tibble: 3 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S2     A         2 #> 3 S3     A         1 get_expr_mat(sub_exp_1) #>    S1 S2 S3 #> V1  1  5  9 #> V2  2  6 10 #> V3  3  7 11 #> V4  4  8 12  # Filter variables sub_exp_2 <- filter_var(exp, type == \"X\") get_var_info(sub_exp_2) #> # A tibble: 2 × 5 #>   variable protein peptide glycan_composition type  #>   <chr>    <chr>   <chr>   <chr>              <chr> #> 1 V1       PRO1    PEP1    H5N2               X     #> 2 V2       PRO2    PEP2    H5N2               X     get_expr_mat(sub_exp_2) #>    S1 S2 S3 S4 S5 S6 #> V1  1  5  9 13 17 21 #> V2  2  6 10 14 18 22  # Use pipe sub_exp_3 <- exp %>%   filter_obs(group == \"A\") %>%   filter_var(type == \"X\") get_sample_info(sub_exp_3) #> # A tibble: 3 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     A         1 #> 2 S2     A         2 #> 3 S3     A         1 get_var_info(sub_exp_3) #> # A tibble: 2 × 5 #>   variable protein peptide glycan_composition type  #>   <chr>    <chr>   <chr>   <chr>              <chr> #> 1 V1       PRO1    PEP1    H5N2               X     #> 2 V2       PRO2    PEP2    H5N2               X     get_expr_mat(sub_exp_3) #>    S1 S2 S3 #> V1  1  5  9 #> V2  2  6 10"},{"path":"https://glycoverse.github.io/glyexp/reference/from_se.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert SummarizedExperiment to experiment — from_se","title":"Convert SummarizedExperiment to experiment — from_se","text":"Convert SummarizedExperiment object experiment() object. function maps SummarizedExperiment structure experiment format: main assay becomes expr_mat colData becomes sample_info rowData becomes var_info metadata becomes meta_data","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/from_se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert SummarizedExperiment to experiment — from_se","text":"","code":"from_se(se, assay_name = NULL, exp_type = NULL, glycan_type = NULL)"},{"path":"https://glycoverse.github.io/glyexp/reference/from_se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert SummarizedExperiment to experiment — from_se","text":"se SummarizedExperiment object convert. assay_name Character string specifying assay use. NULL (default), uses first assay. exp_type Character string specifying experiment type. Must either \"glycomics\", \"glycoproteomics\", \"others\". NULL, try extract metadata, otherwise defaults \"glycomics\". glycan_type Character string specifying glycan type. Must either \"N\" \"O\". NULL, try extract metadata, otherwise defaults \"N\".","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/from_se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert SummarizedExperiment to experiment — from_se","text":"experiment() object.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/from_se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert SummarizedExperiment to experiment — from_se","text":"","code":"# Convert SummarizedExperiment back to experiment se <- as_se(toy_experiment) exp_back <- from_se(se, exp_type = \"glycomics\", glycan_type = \"N\") exp_back #>  #> ── Glycomics Experiment ──────────────────────────────────────────────────────── #> ℹ Expression matrix: 6 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>"},{"path":"https://glycoverse.github.io/glyexp/reference/get_expr_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the expression matrix of an experiment — get_expr_mat","title":"Get the expression matrix of an experiment — get_expr_mat","text":"matrix expression values samples columns variables rows.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/get_expr_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the expression matrix of an experiment — get_expr_mat","text":"","code":"get_expr_mat(exp)"},{"path":"https://glycoverse.github.io/glyexp/reference/get_expr_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the expression matrix of an experiment — get_expr_mat","text":"exp experiment().","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/get_expr_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the expression matrix of an experiment — get_expr_mat","text":"matrix expression values.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/get_meta_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the meta data of an experiment — get_meta_data","title":"Get the meta data of an experiment — get_meta_data","text":"Meta data descriptions experiment, like experiment type (\"glycomics\" \"glycoproteomics\"), glycan type (\"N\" \"O\").","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/get_meta_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the meta data of an experiment — get_meta_data","text":"","code":"get_meta_data(exp, x = NULL)  get_exp_type(exp)  get_glycan_type(exp)"},{"path":"https://glycoverse.github.io/glyexp/reference/get_meta_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the meta data of an experiment — get_meta_data","text":"exp experiment(). x string, name meta data field. NULL (default), list meta data fields returned.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/get_meta_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the meta data of an experiment — get_meta_data","text":"value meta data field. field exist, NULL returned.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/get_sample_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the sample information of an experiment — get_sample_info","title":"Get the sample information of an experiment — get_sample_info","text":"tibble sample information, first column \"sample\".","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/get_sample_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the sample information of an experiment — get_sample_info","text":"","code":"get_sample_info(exp)"},{"path":"https://glycoverse.github.io/glyexp/reference/get_sample_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the sample information of an experiment — get_sample_info","text":"exp experiment().","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/get_sample_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the sample information of an experiment — get_sample_info","text":"tibble sample information.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/get_var_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the variable information of an experiment — get_var_info","title":"Get the variable information of an experiment — get_var_info","text":"tibble variable information, first column \"variable\".","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/get_var_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the variable information of an experiment — get_var_info","text":"","code":"get_var_info(exp)"},{"path":"https://glycoverse.github.io/glyexp/reference/get_var_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the variable information of an experiment — get_var_info","text":"exp experiment().","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/get_var_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the variable information of an experiment — get_var_info","text":"tibble variable information.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/glyexp-package.html","id":null,"dir":"Reference","previous_headings":"","what":"glyexp: Glycoproteomics and Glycomics Experiments — glyexp-package","title":"glyexp: Glycoproteomics and Glycomics Experiments — glyexp-package","text":"Provides tidy data framework managing glycoproteomics glycomics experimental data. core feature 'experiment()' class, serves unified data container integrating expression matrices, variable information (proteins, peptides, glycan compositions, etc.), sample metadata (groups, batches, clinical variables, etc.). package enforces data consistency, validates column types according experiment types (glycomics, glycoproteomics, traitomics, traitproteomics), provides dplyr-style data manipulation functions (filter, mutate, select, arrange, slice, join) seamless data wrangling. data core 'glycoverse' ecosystem, provides consistent interface packages can reliably extract information , enabling smooth data exchange analysis workflows.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyexp/reference/glyexp-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"glyexp: Glycoproteomics and Glycomics Experiments — glyexp-package","text":"Maintainer: Bin Fu 23110220018@m.fudan.edu.cn (ORCID)","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/left_join_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Join data to sample or variable information — left_join_obs","title":"Join data to sample or variable information — left_join_obs","text":"functions allow join additional data sample information variable information experiment(). work similarly dplyr::left_join(), dplyr::inner_join(), dplyr::semi_join(), dplyr::anti_join(), designed work experiment objects. joining, expr_mat automatically updated reflect changes number samples variables. Important Notes: relationship parameter locked \"many--one\" ensure number observations never increases, violate experiment object assumptions. right_join() full_join() supported add new observations experiment.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/left_join_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join data to sample or variable information — left_join_obs","text":"","code":"left_join_obs(exp, y, by = NULL, ...)  inner_join_obs(exp, y, by = NULL, ...)  semi_join_obs(exp, y, by = NULL, ...)  anti_join_obs(exp, y, by = NULL, ...)  left_join_var(exp, y, by = NULL, ...)  inner_join_var(exp, y, by = NULL, ...)  semi_join_var(exp, y, by = NULL, ...)  anti_join_var(exp, y, by = NULL, ...)"},{"path":"https://glycoverse.github.io/glyexp/reference/left_join_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join data to sample or variable information — left_join_obs","text":"exp experiment(). y data frame join sample_info var_info. join specification created dplyr::join_by(), character vector variables join . See dplyr::left_join() details. ... arguments passed underlying dplyr join function, except relationship locked \"many--one\".","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/left_join_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join data to sample or variable information — left_join_obs","text":"new experiment() object updated sample variable information.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/left_join_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join data to sample or variable information — left_join_obs","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following object is masked from ‘package:glyexp’: #>  #>     select_var #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(tibble)  # Create a toy experiment exp <- toy_experiment  # Create additional sample information to join extra_sample_info <- tibble(   sample = c(\"S1\", \"S2\", \"S3\", \"S4\"),   age = c(25, 30, 35, 40),   treatment = c(\"A\", \"B\", \"A\", \"B\") )  # Left join to sample information exp_with_extra <- left_join_obs(exp, extra_sample_info, by = \"sample\") get_sample_info(exp_with_extra) #> # A tibble: 6 × 5 #>   sample group batch   age treatment #>   <chr>  <chr> <dbl> <dbl> <chr>     #> 1 S1     A         1    25 A         #> 2 S2     A         2    30 B         #> 3 S3     A         1    35 A         #> 4 S4     B         2    40 B         #> 5 S5     B         1    NA NA        #> 6 S6     B         2    NA NA         # Inner join (only keeps matching samples) exp_inner <- inner_join_obs(exp, extra_sample_info, by = \"sample\") get_sample_info(exp_inner) #> # A tibble: 4 × 5 #>   sample group batch   age treatment #>   <chr>  <chr> <dbl> <dbl> <chr>     #> 1 S1     A         1    25 A         #> 2 S2     A         2    30 B         #> 3 S3     A         1    35 A         #> 4 S4     B         2    40 B         get_expr_mat(exp_inner)  # Note: expr_mat is updated too #>    S1 S2 S3 S4 #> V1  1  5  9 13 #> V2  2  6 10 14 #> V3  3  7 11 15 #> V4  4  8 12 16  # Create additional variable information to join extra_var_info <- tibble(   protein = c(\"P1\", \"P2\", \"P3\"),   pathway = c(\"A\", \"B\", \"A\"),   importance = c(0.8, 0.6, 0.9) )  # Left join to variable information exp_with_var_extra <- left_join_var(exp, extra_var_info, by = \"protein\") get_var_info(exp_with_var_extra) #> # A tibble: 4 × 6 #>   variable protein peptide glycan_composition pathway importance #>   <chr>    <chr>   <chr>   <chr>              <chr>        <dbl> #> 1 V1       PRO1    PEP1    H5N2               NA              NA #> 2 V2       PRO2    PEP2    H5N2               NA              NA #> 3 V3       PRO3    PEP3    H3N2               NA              NA #> 4 V4       PRO3    PEP4    H3N2               NA              NA"},{"path":"https://glycoverse.github.io/glyexp/reference/merge.glyexp_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two experiments — merge.glyexp_experiment","title":"Merge two experiments — merge.glyexp_experiment","text":"Merges two experiment() objects single object. Expression matrix: Expression matrices merged matching variables. variables present one experiments, corresponding values expression matrix set NA. Sample information: Column names column types must identical (order matter). overlap allowed sample names. Variable information: Column names column types must identical (order matter). Variable names ignored. identity variables determined columns variable information. row first var_info identical (order matter) row B second var_info, considered variable. Therefore, please make sure row unique combination values (except variable), otherwise function determine variable x identical variable y. ensure uniqueness, can use glyclean::aggregate(). Metadata: Metadata taken first experiment. place order x y matters.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/merge.glyexp_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two experiments — merge.glyexp_experiment","text":"","code":"# S3 method for class 'glyexp_experiment' merge(x, y, ...)"},{"path":"https://glycoverse.github.io/glyexp/reference/merge.glyexp_experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two experiments — merge.glyexp_experiment","text":"x, y experiment() objects merge ... used","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/merge.glyexp_experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two experiments — merge.glyexp_experiment","text":"new experiment() object","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/merge.glyexp_experiment.html","id":"variable-matching","dir":"Reference","previous_headings":"","what":"Variable matching","title":"Merge two experiments — merge.glyexp_experiment","text":"variable information tibble, variable column just arbitrary unique identifier, real identity variable determined columns. example, variable information tibble following columns:   know V1, V2, V3 different variables, V3 V4 variable (glycan composition, protein, protein site). merge, function use columns variable information tibble except variable match variables. means combination columns unique, function determine identity variables. ensure uniqueness, can use glyclean::aggregate(), merges expression levels variables identity. merge, new variable column added variable information tibble, used rownames expression matrix.","code":"variable glycan_composition protein protein_site V1       Hex(2)HexNAc(1)    P1      2 V2       Hex(2)HexNAc(1)    P2      3 V3       Hex(2)HexNAc(2)    P2      3 V4       Hex(2)HexNAc(2)    P2      3"},{"path":"https://glycoverse.github.io/glyexp/reference/merge.glyexp_experiment.html","id":"variable-and-sample-orders","dir":"Reference","previous_headings":"","what":"Variable and sample orders","title":"Merge two experiments — merge.glyexp_experiment","text":"order variables samples merged experiment deterministic. samples, overlapping allowed sample names, new sample names union sample names x y, orders reserved. variables, new variables : First, variables x, order x. , variables y x, order y. Note variables, refer identity variables, variable names variable column.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/mutate_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutate sample or variable information — mutate_obs","title":"Mutate sample or variable information — mutate_obs","text":"Mutate sample variable information tibble experiment(). syntax dplyr::mutate() used. example, add new column sample information tibble, use mutate_obs(exp, new_column = value). actually calls dplyr::mutate() sample information tibble new_column = value. sample column sample_info variable column var_info modified, new column must unique, otherwise error thrown. column names row names expr_mat updated accordingly.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/mutate_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutate sample or variable information — mutate_obs","text":"","code":"mutate_obs(exp, ...)  mutate_var(exp, ...)"},{"path":"https://glycoverse.github.io/glyexp/reference/mutate_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutate sample or variable information — mutate_obs","text":"exp experiment(). ... <data-masking> Name-value pairs, passed dplyr::mutate() internally.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/mutate_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutate sample or variable information — mutate_obs","text":"new experiment() object.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/mutate_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutate sample or variable information — mutate_obs","text":"","code":"# Create a toy experiment for demonstration exp <- toy_experiment # Add a type column to the variable information for demonstration exp$var_info$type <- c(\"X\", \"X\", \"Y\", \"Y\")  # Add a new column to sample information tibble or variable information tibble mutate_obs(exp, new_column = c(1, 2, 3, 4, 5, 6))$sample_info #> # A tibble: 6 × 4 #>   sample group batch new_column #>   <chr>  <chr> <dbl>      <dbl> #> 1 S1     A         1          1 #> 2 S2     A         2          2 #> 3 S3     A         1          3 #> 4 S4     B         2          4 #> 5 S5     B         1          5 #> 6 S6     B         2          6 mutate_var(exp, new_column = c(\"A\", \"A\", \"B\", \"B\"))$var_info #> # A tibble: 4 × 6 #>   variable protein peptide glycan_composition type  new_column #>   <chr>    <chr>   <chr>   <chr>              <chr> <chr>      #> 1 V1       PRO1    PEP1    H5N2               X     A          #> 2 V2       PRO2    PEP2    H5N2               X     A          #> 3 V3       PRO3    PEP3    H3N2               Y     B          #> 4 V4       PRO3    PEP4    H3N2               Y     B           # Modify existing columns mutate_obs(exp, group = dplyr::if_else(group == \"A\", \"good\", \"bad\"))$sample_info #> # A tibble: 6 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 S1     good      1 #> 2 S2     good      2 #> 3 S3     good      1 #> 4 S4     bad       2 #> 5 S5     bad       1 #> 6 S6     bad       2 mutate_var(exp, type = dplyr::if_else(type == \"X\", \"good\", \"bad\"))$var_info #> # A tibble: 4 × 5 #>   variable protein peptide glycan_composition type  #>   <chr>    <chr>   <chr>   <chr>              <chr> #> 1 V1       PRO1    PEP1    H5N2               good  #> 2 V2       PRO2    PEP2    H5N2               good  #> 3 V3       PRO3    PEP3    H3N2               bad   #> 4 V4       PRO3    PEP4    H3N2               bad    # Modify the `sample` column in sample information tibble new_exp <- mutate_obs(exp, sample = c(\"SI\", \"SII\", \"SIII\", \"SIV\", \"SV\", \"SVI\")) new_exp$sample_info #> # A tibble: 6 × 3 #>   sample group batch #>   <chr>  <chr> <dbl> #> 1 SI     A         1 #> 2 SII    A         2 #> 3 SIII   A         1 #> 4 SIV    B         2 #> 5 SV     B         1 #> 6 SVI    B         2 new_exp$expr_mat #>    SI SII SIII SIV SV SVI #> V1  1   5    9  13 17  21 #> V2  2   6   10  14 18  22 #> V3  3   7   11  15 19  23 #> V4  4   8   12  16 20  24  # Modify the `variable` column in variable information tibble new_exp <- mutate_var(exp, variable = c(\"VI\", \"VII\", \"VIII\", \"VIV\")) new_exp$var_info #> # A tibble: 4 × 5 #>   variable protein peptide glycan_composition type  #>   <chr>    <chr>   <chr>   <chr>              <chr> #> 1 VI       PRO1    PEP1    H5N2               X     #> 2 VII      PRO2    PEP2    H5N2               X     #> 3 VIII     PRO3    PEP3    H3N2               Y     #> 4 VIV      PRO3    PEP4    H3N2               Y     new_exp$expr_mat #>      S1 S2 S3 S4 S5 S6 #> VI    1  5  9 13 17 21 #> VII   2  6 10 14 18 22 #> VIII  3  7 11 15 19 23 #> VIV   4  8 12 16 20 24"},{"path":"https://glycoverse.github.io/glyexp/reference/n_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get number of samples or variables of an experiment — n_samples","title":"Get number of samples or variables of an experiment — n_samples","text":"Getting number samples variables experiment(). Syntax sugar ncol(exp$expr_mat) nrow(exp$expr_mat).","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/n_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get number of samples or variables of an experiment — n_samples","text":"","code":"n_samples(exp)  n_variables(exp)"},{"path":"https://glycoverse.github.io/glyexp/reference/n_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get number of samples or variables of an experiment — n_samples","text":"exp experiment().","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/n_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get number of samples or variables of an experiment — n_samples","text":"integer number samples variables.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/n_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get number of samples or variables of an experiment — n_samples","text":"","code":"exp <- toy_experiment n_samples(exp) #> [1] 6 n_variables(exp) #> [1] 4"},{"path":"https://glycoverse.github.io/glyexp/reference/real_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Real glycoproteomics experiment — real_experiment","title":"Real glycoproteomics experiment — real_experiment","text":"real glycoproteomics experiment object. dataset derived unpublished ProteomeXchange dataset PXD063749. contains serum N-glycoproteome profiles 12 patients different liver conditions: healthy (H), hepatitis (M), cirrhosis (Y), hepatocellular carcinoma (C). Glycopeptide identification annotation performed using pGlyco3 (https://github.com/pFindStudio/pGlyco3), quantification carried pGlycoQuant (https://github.com/Power-Quant/pGlycoQuant). raw data imported glyread::read_pglyco3_pglycoquant().","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/real_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Real glycoproteomics experiment — real_experiment","text":"","code":"real_experiment"},{"path":"https://glycoverse.github.io/glyexp/reference/real_experiment.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Real glycoproteomics experiment — real_experiment","text":"experiment() object 4262 variables 12 samples.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/real_experiment.html","id":"variable-information-","dir":"Reference","previous_headings":"","what":"Variable information:","title":"Real glycoproteomics experiment — real_experiment","text":"peptide: peptide sequence peptide_site: site position peptide protein: protein accession protein_site: site position protein gene: gene symbol glycan_composition: glycan composition (glyrepr::glycan_composition()) glycan_structure: glycan structure (glyrepr::glycan_structure())","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/real_experiment.html","id":"sample-information-","dir":"Reference","previous_headings":"","what":"Sample information:","title":"Real glycoproteomics experiment — real_experiment","text":"sample: sample ID group: disease group, one \"H\" (healthy), \"M\" (hepatitis), \"Y\" (cirrhosis), \"C\" (hepatocellular carcinoma)","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/real_experiment2.html","id":null,"dir":"Reference","previous_headings":"","what":"Real glycomics experiment — real_experiment2","title":"Real glycomics experiment — real_experiment2","text":"real glycomics experiment object. dataset derived unpublished glycoPOST dataset GPST000313. contains serum N-glycome profiles 144 samples different liver conditions: healthy (H), hepatitis (M), cirrhosis (Y), hepatocellular carcinoma (C).","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/real_experiment2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Real glycomics experiment — real_experiment2","text":"","code":"real_experiment2"},{"path":"https://glycoverse.github.io/glyexp/reference/real_experiment2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Real glycomics experiment — real_experiment2","text":"experiment() object 67 variables 144 samples.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/real_experiment2.html","id":"variable-information-","dir":"Reference","previous_headings":"","what":"Variable information:","title":"Real glycomics experiment — real_experiment2","text":"glycan_composition: glycan composition (glyrepr::glycan_composition()) glycan_structure: glycan structure (glyrepr::glycan_structure())","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/real_experiment2.html","id":"sample-information-","dir":"Reference","previous_headings":"","what":"Sample information:","title":"Real glycomics experiment — real_experiment2","text":"sample: sample ID group: disease group, one \"H\" (healthy), \"M\" (hepatitis), \"Y\" (cirrhosis), \"C\" (hepatocellular carcinoma)","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/rename_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns in the sample or variable information tibble — rename_obs","title":"Rename columns in the sample or variable information tibble — rename_obs","text":"two functions provide way rename columns sample variable information tibble experiment(). syntax dplyr::rename() used. example, rename \"group\" column sample information tibble \"condition\", use rename_obs(exp, condition = group). Note rename \"sample\" column sample information tibble, well \"variable\" column variable information tibble. two columns used link sample variable information tibble expression matrix.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/rename_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns in the sample or variable information tibble — rename_obs","text":"","code":"rename_obs(exp, ...)  rename_var(exp, ...)"},{"path":"https://glycoverse.github.io/glyexp/reference/rename_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns in the sample or variable information tibble — rename_obs","text":"exp experiment(). ... <data-masking> Name pairs rename. Use new_name = old_name rename columns.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/rename_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename columns in the sample or variable information tibble — rename_obs","text":"new experiment() object.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/rename_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns in the sample or variable information tibble — rename_obs","text":"","code":"toy_exp <- toy_experiment toy_exp #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 6 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>  # Rename columns in sample information tibble rename_obs(toy_exp, condition = group) #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 6 samples, 4 variables #> ℹ Sample information fields: condition <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>  # Rename columns in variable information tibble rename_var(toy_exp, composition = glycan_composition) #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 6 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, composition <chr>"},{"path":"https://glycoverse.github.io/glyexp/reference/samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Samples or Variables of an Experiment — samples","title":"Get Samples or Variables of an Experiment — samples","text":"Getting names samples variables experiment(). Syntax sugar colnames(exp$expr_mat) rownames(exp$expr_mat).","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Samples or Variables of an Experiment — samples","text":"","code":"samples(exp)  variables(exp)"},{"path":"https://glycoverse.github.io/glyexp/reference/samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Samples or Variables of an Experiment — samples","text":"exp experiment().","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Samples or Variables of an Experiment — samples","text":"character vector sample variable names.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Samples or Variables of an Experiment — samples","text":"","code":"exp <- toy_experiment samples(exp) #> [1] \"S1\" \"S2\" \"S3\" \"S4\" \"S5\" \"S6\" variables(exp) #> [1] \"V1\" \"V2\" \"V3\" \"V4\""},{"path":"https://glycoverse.github.io/glyexp/reference/select_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Select columns of the sample or variable information tibble — select_obs","title":"Select columns of the sample or variable information tibble — select_obs","text":"two functions provide way trimming sample variable information tibble experiment() columns interest. syntax dplyr::select() used. example, get new experiment() \"sample\" \"group\" columns sample information tibble, use select_obs(exp, group). Note need () explicitly select deselect sample column sample_info. automatically handled select_obs(), always selected. applies variable column var_info.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/select_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select columns of the sample or variable information tibble — select_obs","text":"","code":"select_obs(exp, ...)  select_var(exp, ...)"},{"path":"https://glycoverse.github.io/glyexp/reference/select_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select columns of the sample or variable information tibble — select_obs","text":"exp experiment(). ... <data-masking> Column names select. empty, columns except sample variable column discarded.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/select_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select columns of the sample or variable information tibble — select_obs","text":"new experiment() object.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/select_obs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select columns of the sample or variable information tibble — select_obs","text":"using select_var() dplyr, may encounter package conflicts. dplyr also function called select_var() deprecated two years. encounter package conflicts, use following code resolve :","code":"conflicted::conflicts_prefer(glyexp::select_var)"},{"path":"https://glycoverse.github.io/glyexp/reference/select_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select columns of the sample or variable information tibble — select_obs","text":"","code":"library(magrittr)  toy_exp <- toy_experiment  toy_exp_2 <- toy_exp %>%   select_obs(group) %>%   select_var(protein, peptide) #> Error in select_var(., protein, peptide): unused argument (peptide)  get_sample_info(toy_exp_2) #> Error: object 'toy_exp_2' not found get_var_info(toy_exp_2) #> Error: object 'toy_exp_2' not found"},{"path":"https://glycoverse.github.io/glyexp/reference/set_meta_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the meta data of an experiment — set_meta_data","title":"Set the meta data of an experiment — set_meta_data","text":"Set meta data values experiment, like experiment type (\"glycomics\" \"glycoproteomics\"), glycan type (\"N\" \"O\").","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/set_meta_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the meta data of an experiment — set_meta_data","text":"","code":"set_meta_data(exp, x, value)  set_exp_type(exp, value)  set_glycan_type(exp, value)"},{"path":"https://glycoverse.github.io/glyexp/reference/set_meta_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the meta data of an experiment — set_meta_data","text":"exp experiment(). x string, name meta data field. value value set meta data field.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/set_meta_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the meta data of an experiment — set_meta_data","text":"modified experiment() object.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/slice_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Slice sample or variable information — slice_obs","title":"Slice sample or variable information — slice_obs","text":"Slice sample variable information tibble experiment(). functions provide row-wise slicing operations similar dplyr's slice functions. select rows position based values specified columns, update expression matrix accordingly match new selection. slice_obs() slice_var(): Select rows position slice_head_obs() slice_head_var(): Select first n rows slice_tail_obs() slice_tail_var(): Select last n rows slice_sample_obs() slice_sample_var(): Select random n rows slice_max_obs() slice_max_var(): Select rows highest values slice_min_obs() slice_min_var(): Select rows lowest values","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/slice_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slice sample or variable information — slice_obs","text":"","code":"slice_obs(exp, ...)  slice_var(exp, ...)  slice_head_obs(exp, n, prop)  slice_head_var(exp, n, prop)  slice_tail_obs(exp, n, prop)  slice_tail_var(exp, n, prop)  slice_sample_obs(exp, n, prop, weight_by = NULL, replace = FALSE)  slice_sample_var(exp, n, prop, weight_by = NULL, replace = FALSE)  slice_max_obs(exp, order_by, ..., n, prop, with_ties = TRUE, na_rm = FALSE)  slice_max_var(exp, order_by, ..., n, prop, with_ties = TRUE, na_rm = FALSE)  slice_min_obs(exp, order_by, ..., n, prop, with_ties = TRUE, na_rm = FALSE)  slice_min_var(exp, order_by, ..., n, prop, with_ties = TRUE, na_rm = FALSE)"},{"path":"https://glycoverse.github.io/glyexp/reference/slice_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slice sample or variable information — slice_obs","text":"exp experiment(). ... <data-masking> slice_*(), integer row positions. slice_max() slice_min(), variables order . arguments passed corresponding dplyr function. n slice_head(), slice_tail(), slice_sample(), slice_max(), slice_min(), number rows select. prop slice_head(), slice_tail(), slice_sample(), slice_max(), slice_min(), proportion rows select. weight_by slice_sample(), sampling weights. replace slice_sample(), sampling replacement? order_by slice_max() slice_min(), variable order . with_ties slice_max() slice_min(), ties kept? na_rm slice_max() slice_min(), missing values removed?","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/slice_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slice sample or variable information — slice_obs","text":"new experiment() object.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/slice_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slice sample or variable information — slice_obs","text":"","code":"# Create a toy experiment for demonstration   exp <- toy_experiment # Add columns needed for demonstration exp$sample_info$score <- c(10, 20, 30, 15, 25, 35) exp$var_info$value <- c(5, 10, 15, 8)  # Select specific rows by position slice_obs(exp, 1, 3, 5) #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 3 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl>, score <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>, value <dbl>  # Select first 3 samples slice_head_obs(exp, n = 3) #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 3 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl>, score <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>, value <dbl>  # Select last 2 variables slice_tail_var(exp, n = 2) #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 6 samples, 2 variables #> ℹ Sample information fields: group <chr>, batch <dbl>, score <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>, value <dbl>  # Select 2 random samples slice_sample_obs(exp, n = 2) #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 2 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl>, score <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>, value <dbl>  # Select samples with highest scores slice_max_obs(exp, order_by = score, n = 2) #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 2 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl>, score <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>, value <dbl>  # Select variables with lowest values slice_min_var(exp, order_by = value, n = 2) #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 6 samples, 2 variables #> ℹ Sample information fields: group <chr>, batch <dbl>, score <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>, value <dbl>"},{"path":"https://glycoverse.github.io/glyexp/reference/split.glyexp_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Split an experiment — split.glyexp_experiment","title":"Split an experiment — split.glyexp_experiment","text":"Devides experiment() list experiment() objects f.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/split.glyexp_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split an experiment — split.glyexp_experiment","text":"","code":"# S3 method for class 'glyexp_experiment' split(x, f, drop = FALSE, where = \"var_info\", ...)"},{"path":"https://glycoverse.github.io/glyexp/reference/split.glyexp_experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split an experiment — split.glyexp_experiment","text":"x experiment(). f <data-masking> column var_info sample_info .factor(f)defines grouping. drop Logical indicating levels occur dropped. Defaults FALSE. find column, \"var_info\" \"sample_info\". ... Ignored","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/split.glyexp_experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split an experiment — split.glyexp_experiment","text":"named list experiment() objects.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/split.glyexp_experiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split an experiment — split.glyexp_experiment","text":"","code":"split(toy_experiment, group, where = \"sample_info\") #> $A #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 3 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr> #>  #> $B #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 3 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr> #>"},{"path":"https://glycoverse.github.io/glyexp/reference/sub-.glyexp_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsetting experiments — [.glyexp_experiment","title":"Subsetting experiments — [.glyexp_experiment","text":"Getting subset experiment object. Subsetting first done expression matrix, sample information variable information tibbles filtered ordered accordingly. Syntax [ similar subsetting matrix, differences: row column indices required, .e. exp[] allowed, exp[, ] exp[, j] allowed. drop argument supported. Subsetting experiment always returns new experiment, even one sample one variable. Renaming subsetted experiment longer supported. Assigning subset experiment allowed, .e., exp[1, 1[ <- 0 raise error. can create new experiment new data needed.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/sub-.glyexp_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsetting experiments — [.glyexp_experiment","text":"","code":"# S3 method for class 'glyexp_experiment' x[i, j, ...]  # S3 method for class 'glyexp_experiment' x[i, j, ...] <- value"},{"path":"https://glycoverse.github.io/glyexp/reference/sub-.glyexp_experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsetting experiments — [.glyexp_experiment","text":"x experiment(). , j Row (variable) column (sample) indices subset. ... Ignored. value Ignored.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/sub-.glyexp_experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsetting experiments — [.glyexp_experiment","text":"experiment() object.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/sub-.glyexp_experiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsetting experiments — [.glyexp_experiment","text":"","code":"# Create a toy experiment for demonstration exp <- toy_experiment  # Subsetting single samples exp[, \"S1\"] #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 1 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr> exp[, 1] #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 1 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>  # Subsetting single variables exp[\"V1\", ] #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 6 samples, 1 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr> exp[1, ] #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 6 samples, 1 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>  # Subsetting multiple samples and variables exp[c(\"V1\", \"V2\"), c(\"S2\", \"S3\")] #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 2 samples, 2 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr> exp[c(1, 2), c(2, 3)] #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 2 samples, 2 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>  # Create a copy exp[, ] #>  #> ── Others Experiment ─────────────────────────────────────────────────────────── #> ℹ Expression matrix: 6 samples, 4 variables #> ℹ Sample information fields: group <chr>, batch <dbl> #> ℹ Variable information fields: protein <chr>, peptide <chr>, glycan_composition <chr>"},{"path":"https://glycoverse.github.io/glyexp/reference/toy_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy experiment — toy_experiment","title":"Toy experiment — toy_experiment","text":"toy experiment object new users play get familiar experiment() objects.","code":""},{"path":"https://glycoverse.github.io/glyexp/reference/toy_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy experiment — toy_experiment","text":"","code":"toy_experiment"},{"path":[]},{"path":"https://glycoverse.github.io/glyexp/reference/toy_experiment.html","id":"toy-experiment","dir":"Reference","previous_headings":"","what":"toy_experiment","title":"Toy experiment — toy_experiment","text":"experiment() object 4 variables 6 samples. var_info contains fields: protein, peptide, glycan_composition. sample_info contains fields: group batch.","code":""},{"path":[]},{"path":[]},{"path":"https://glycoverse.github.io/glyexp/news/index.html","id":"minor-improvements-and-fixes-0-10-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"glyexp 0.10.1","text":"glyexp now depends CRAN version glyrepr.","code":""},{"path":"https://glycoverse.github.io/glyexp/news/index.html","id":"glyexp-0100","dir":"Changelog","previous_headings":"","what":"glyexp 0.10.0","title":"glyexp 0.10.0","text":"version big update experiment(). made function flexible, robust, user-friendly. breaking changes introduced version broad impact many glycoverse packages. recommend update packages latest versions.","code":""},{"path":"https://glycoverse.github.io/glyexp/news/index.html","id":"breaking-changes-0-10-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"glyexp 0.10.0","text":"experiment() now checks whether certain columns present var_info. “glycomics” experiments, glycan_composition required. “glycoproteomics” experiments, protein, protein_site, glycan_composition required. required column missing, error raised.","code":""},{"path":"https://glycoverse.github.io/glyexp/news/index.html","id":"new-features-0-10-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"glyexp 0.10.0","text":"experiment() now intelligently coerce common column types improve user experience. example, convert character factor “group” column sample_info. behavior can controlled coerce_col_types argument. experiment() now checks column types important columns, protein, protein_site, glycan_composition, etc. checking performed column coercion (coerce_col_types TRUE), message printed column type conventions violated. behavior can controlled check_col_types argument. Add new type experiment: “others”. type omics experiments glycoproteomics glycomics. case, glycan_type can NULL. Also, type coercion checking skipped type. Now minimum required input experiment() expression matrix. provided, sample_info var_info automatically generated based column row names expression matrix. exp_type set “others” glycan_type set NULL. gives users flexibility create experiment() objects. “traitomics” “traitproteomics” valid values exp_type experiment() now.","code":""},{"path":"https://glycoverse.github.io/glyexp/news/index.html","id":"minor-improvements-and-bug-fixes-0-10-0","dir":"Changelog","previous_headings":"","what":"Minor Improvements and Bug Fixes","title":"glyexp 0.10.0","text":"toy_experiment now exp_type “others”. real_experiment real_experiment2 now factors “group” column sample_info. Update “Creating Experiments” vignette reflect new changes. set_meta_data(), set_exp_type(), set_glycan_type() now check meta data. get_meta_data() now returns meta data fields x NULL.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyexp/news/index.html","id":"minor-improvements-and-bug-fixes-0-9-2","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glyexp 0.9.2","text":"Printing experiment() object now includes experiment type title. Add vignette explain four experiment types. Add vignette creating experiment() object scratch.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyexp/news/index.html","id":"minor-improvements-and-bug-fixes-0-9-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glyexp 0.9.1","text":"Import := rlang fix “find function”%||%“” bug as_se() from_se() systems.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyexp/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"New features","title":"glyexp 0.9.0","text":"Add real_experiment2, glycomics example experiment. Add from_se() as_se() convert experiment() SummarizedExperiment() objects. Add split() split experiment list experiments.","code":""},{"path":"https://glycoverse.github.io/glyexp/news/index.html","id":"minor-improvements-and-bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glyexp 0.9.0","text":"Add merge() split() getting started vignette. Add picture getting started vignette explain index columns. Fix typo toy_experiment: “N3N2” “H3N2”. Fix error documentation select_var().","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyexp/news/index.html","id":"breaking-changes-0-8-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"glyexp 0.8.0","text":"toy_experiment longer function, data object. Instead using toy_experiment() get example experiment, use toy_experiment directly.","code":""},{"path":"https://glycoverse.github.io/glyexp/news/index.html","id":"new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"New features","title":"glyexp 0.8.0","text":"Add left_join_obs(), left_join_var(), inner_join_obs(), inner_join_var(), semi_join_obs(), semi_join_var(), anti_join_obs(), anti_join_var(). functions useful adding new information experiment() tibbles. Add real_experiment data object. derived real-world N-glycoproteome dataset.","code":""},{"path":"https://glycoverse.github.io/glyexp/news/index.html","id":"minor-improvements-and-bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"glyexp 0.8.0","text":"Fix warnings merge(). Column types sample_info var_info now displayed console printing experiment() object. set_exp_type() set_glycan_type() now validate input values.","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyexp/news/index.html","id":"major-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"glyexp 0.7.0","text":"Add merge() function merge two experiments.","code":""},{"path":"https://glycoverse.github.io/glyexp/news/index.html","id":"minor-improvements-0-7-0","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"glyexp 0.7.0","text":"Update documentation experiment().","code":""},{"path":[]},{"path":"https://glycoverse.github.io/glyexp/news/index.html","id":"major-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"glyexp 0.6.0","text":"count_compositions(): number glycan compositions. count_structures(): number glycan structures. count_peptides(): number peptides. count_glycopeptides(): number unique combinations peptides, sites, glycans. count_glycoforms(): number unique combinations proteins, sites, glycans. count_proteins(): number proteins. count_glycosites(): number unique combinations proteins sites. Remove add_glycan_descriptions(), add_struc_descriptions(), add_comp_descriptions(). functions moved glymotif package.","code":""}]
